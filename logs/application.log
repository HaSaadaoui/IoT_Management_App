2025-10-13 09:19:40 - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15h30m15s917ms747µs).
2025-10-13 09:33:28 - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m13s670ms789µs900ns).
2025-10-13 09:38:06 - GET "/login", parameters={}
2025-10-13 09:38:06 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 09:38:06 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:38:06 - Completed 200 OK
2025-10-13 09:38:07 - GET "/login", parameters={}
2025-10-13 09:38:07 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 09:38:07 - GET "/css/styles.css", parameters={}
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - Selected '*/*' given [*/*]
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - GET "/css/login-home.css", parameters={}
2025-10-13 09:38:07 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - GET "/image/cacher.svg", parameters={}
2025-10-13 09:38:07 - GET "/image/oeil.svg", parameters={}
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:07 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:38:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:07 - Completed 200 OK
2025-10-13 09:38:09 - GET "/home", parameters={}
2025-10-13 09:38:09 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 09:38:09 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:38:09 - [THYMELEAF][http-nio-8080-exec-9][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:38:09 - Completed 200 OK
2025-10-13 09:38:09 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 09:38:09 - GET "/css/login-home.css", parameters={}
2025-10-13 09:38:09 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:38:09 - GET "/css/styles.css", parameters={}
2025-10-13 09:38:09 - GET "/css/header.css", parameters={}
2025-10-13 09:38:09 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Completed 200 OK
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Completed 200 OK
2025-10-13 09:38:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:09 - Completed 200 OK
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:38:10 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:38:10 - GET "/image/predictive.svg", parameters={}
2025-10-13 09:38:10 - GET "/image/alerte.svg", parameters={}
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:10 - GET "/image/config-icon.svg", parameters={}
2025-10-13 09:38:10 - GET "/image/user-icon.svg", parameters={}
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:10 - Resource not found
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:38:10 - Completed 404 NOT_FOUND
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - Completed 200 OK
2025-10-13 09:38:10 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:38:10 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:38:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:38:10 - Writing [{timestamp=Mon Oct 13 09:38:10 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:38:10 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:38:17 - GET "/users/user5", parameters={}
2025-10-13 09:38:17 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 09:38:17 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:38:18 - [THYMELEAF][http-nio-8080-exec-2][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:18 - Resource not found
2025-10-13 09:38:18 - GET "/css/styles.css", parameters={}
2025-10-13 09:38:18 - GET "/css/header.css", parameters={}
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:18 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:38:18 - Completed 404 NOT_FOUND
2025-10-13 09:38:18 - GET "/css/profile.css", parameters={}
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:18 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:18 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:38:18 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:38:18 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - Writing [{timestamp=Mon Oct 13 09:38:18 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:38:18 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:18 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:18 - Completed 200 OK
2025-10-13 09:38:21 - GET "/home", parameters={}
2025-10-13 09:38:21 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 09:38:21 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:38:21 - [THYMELEAF][http-nio-8080-exec-10][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - GET "/css/header.css", parameters={}
2025-10-13 09:38:21 - GET "/css/styles.css", parameters={}
2025-10-13 09:38:21 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:38:21 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - GET "/css/login-home.css", parameters={}
2025-10-13 09:38:21 - Resource not found
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:38:21 - Completed 404 NOT_FOUND
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:38:21 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:38:21 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:38:21 - GET "/image/predictive.svg", parameters={}
2025-10-13 09:38:21 - GET "/image/user-icon.svg", parameters={}
2025-10-13 09:38:21 - GET "/image/alerte.svg", parameters={}
2025-10-13 09:38:21 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Writing [{timestamp=Mon Oct 13 09:38:21 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:38:21 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - GET "/image/config-icon.svg", parameters={}
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:38:21 - Completed 200 OK
2025-10-13 09:41:13 - GET "/", parameters={}
2025-10-13 09:41:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:14 - Resource not found
2025-10-13 09:41:14 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .]
2025-10-13 09:41:14 - Completed 404 NOT_FOUND
2025-10-13 09:41:14 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:14 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)
2025-10-13 09:41:14 - Selected 'text/html' given [text/html, text/html;q=0.8]
2025-10-13 09:41:14 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:14 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:14 - Resource not found
2025-10-13 09:41:14 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:14 - Completed 404 NOT_FOUND
2025-10-13 09:41:14 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:14 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:14 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:14 - Writing [{timestamp=Mon Oct 13 09:41:14 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:14 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:16 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:16 - Resource not found
2025-10-13 09:41:16 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:16 - Completed 404 NOT_FOUND
2025-10-13 09:41:16 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:16 - GET "/css/header.css", parameters={}
2025-10-13 09:41:16 - GET "/css/login-home.css", parameters={}
2025-10-13 09:41:16 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:16 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:16 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:16 - Writing [{timestamp=Mon Oct 13 09:41:16 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:16 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:16 - Completed 200 OK
2025-10-13 09:41:16 - Completed 200 OK
2025-10-13 09:41:16 - Completed 200 OK
2025-10-13 09:41:16 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:16 - Resource not found
2025-10-13 09:41:16 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:16 - Completed 404 NOT_FOUND
2025-10-13 09:41:16 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:16 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:16 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:16 - Writing [{timestamp=Mon Oct 13 09:41:16 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:16 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:17 - GET "/manage-gateways", parameters={}
2025-10-13 09:41:17 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 09:41:17 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:41:17 - [THYMELEAF][http-nio-8080-exec-3][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:41:17 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Resource not found
2025-10-13 09:41:17 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:17 - Completed 404 NOT_FOUND
2025-10-13 09:41:17 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:17 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:17 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:17 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:17 - Writing [{timestamp=Mon Oct 13 09:41:17 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:17 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - GET "/css/header.css", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - GET "/css/manageGateways.css", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - GET "/image/search-icon.svg", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 09:41:17 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 09:41:17 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:17 - Completed 200 OK
2025-10-13 09:41:19 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Resource not found
2025-10-13 09:41:19 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:19 - Completed 404 NOT_FOUND
2025-10-13 09:41:19 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:19 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:19 - Writing [{timestamp=Mon Oct 13 09:41:19 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:19 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:19 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Resource not found
2025-10-13 09:41:19 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:19 - Completed 404 NOT_FOUND
2025-10-13 09:41:19 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:19 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:19 - Writing [{timestamp=Mon Oct 13 09:41:19 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:19 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:19 - GET "/users/user5", parameters={}
2025-10-13 09:41:19 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 09:41:19 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:41:19 - [THYMELEAF][http-nio-8080-exec-3][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:19 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:19 - GET "/css/profile.css", parameters={}
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:19 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:19 - GET "/css/header.css", parameters={}
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:19 - Resource not found
2025-10-13 09:41:19 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:19 - Completed 404 NOT_FOUND
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:19 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:19 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:41:19 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:19 - Writing [{timestamp=Mon Oct 13 09:41:19 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:19 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:19 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:19 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:19 - Completed 200 OK
2025-10-13 09:41:20 - Completed 200 OK
2025-10-13 09:41:31 - GET "/home", parameters={}
2025-10-13 09:41:31 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 09:41:31 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:41:31 - [THYMELEAF][http-nio-8080-exec-7][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:41:31 - GET "/css/header.css", parameters={}
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Resource not found
2025-10-13 09:41:31 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:31 - Completed 404 NOT_FOUND
2025-10-13 09:41:31 - GET "/css/login-home.css", parameters={}
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:31 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:31 - GET "/image/predictive.svg", parameters={}
2025-10-13 09:41:31 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:31 - Writing [{timestamp=Mon Oct 13 09:41:31 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:31 - GET "/image/user-icon.svg", parameters={}
2025-10-13 09:41:31 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:31 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - GET "/image/alerte.svg", parameters={}
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - GET "/image/config-icon.svg", parameters={}
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:31 - Completed 200 OK
2025-10-13 09:41:33 - GET "/manage-gateways", parameters={}
2025-10-13 09:41:33 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 09:41:33 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:41:33 - [THYMELEAF][http-nio-8080-exec-10][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:41:33 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - GET "/css/manageGateways.css", parameters={}
2025-10-13 09:41:33 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:33 - GET "/css/header.css", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Resource not found
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:33 - Completed 404 NOT_FOUND
2025-10-13 09:41:33 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:33 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:33 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:33 - Writing [{timestamp=Mon Oct 13 09:41:33 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:33 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - GET "/image/search-icon.svg", parameters={}
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 09:41:33 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:33 - Completed 200 OK
2025-10-13 09:41:34 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 09:41:34 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 09:41:34 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:41:34 - Completed 200 OK
2025-10-13 09:41:35 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Resource not found
2025-10-13 09:41:35 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:41:35 - Completed 404 NOT_FOUND
2025-10-13 09:41:35 - GET "/css/styles.css", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:41:35 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:35 - GET "/css/header.css", parameters={}
2025-10-13 09:41:35 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 09:41:35 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Writing [{timestamp=Mon Oct 13 09:41:35 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:41:35 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - GET "/image/thermostat.svg", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 09:41:35 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:41:35 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - Completed 200 OK
2025-10-13 09:41:35 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341295243", parameters={masked}
2025-10-13 09:41:35 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 09:41:35 - [37f0b0d6] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-D44A277458E9FE5C4E134ACBBA50728B-1760341295279
2025-10-13 09:41:35 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:41:35 - Exiting but response remains open for further handling
2025-10-13 09:41:40 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
		at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
	at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [9862: /192.168.1.1:53] DefaultDnsQuestion(monitoring. IN AAAA) query '9862' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-10-13 09:41:40 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:41:40 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:41:40 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341295243", parameters={masked}
2025-10-13 09:41:40 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 09:41:40 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
2025-10-13 09:41:40 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsNameResolverTimeoutException: [9862: /192.168.1.1:53] DefaultDnsQuestion(monitoring. IN AAAA) query '9862' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-10-13 09:41:40 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries ] with root cause
io.netty.resolver.dns.DnsNameResolverTimeoutException: [9862: /192.168.1.1:53] DefaultDnsQuestion(monitoring. IN AAAA) query '9862' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-10-13 09:41:40 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760341295243", parameters={masked}
2025-10-13 09:41:40 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:41:40 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 09:41:40 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 09:41:40 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 09:41:40 - Nothing to write: null body
2025-10-13 09:41:40 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 09:41:40 - Exiting from "ERROR" dispatch, status 500
2025-10-13 09:41:40 - Servlet container error notification for "/error"
2025-10-13 09:41:40 - [3044dae7] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-D44A277458E9FE5C4E134ACBBA50728B-1760341295279
2025-10-13 09:41:45 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-D44A277458E9FE5C4E134ACBBA50728B-1760341295279
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
		at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
	at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [14329: /192.168.1.1:53] DefaultDnsQuestion(monitoring. IN AAAA) query '14329' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-10-13 09:41:45 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
		at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1), AAAA(28)] after 4 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:524)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:343)
	at io.netty.resolver.dns.DnsQueryContext$4.run(DnsQueryContext.java:278)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:160)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [14329: /192.168.1.1:53] DefaultDnsQuestion(monitoring. IN AAAA) query '14329' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-10-13 09:50:56 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 09:50:56 - Graceful shutdown complete
2025-10-13 09:50:58 - HikariPool-1 - Shutdown initiated...
2025-10-13 09:50:58 - HikariPool-1 - Shutdown completed.
2025-10-13 09:51:04 - Starting SensorprocessorApplication using Java 17.0.12 with PID 25968 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 09:51:04 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 09:51:07 - Tomcat initialized with port 8080 (http)
2025-10-13 09:51:07 - Starting service [Tomcat]
2025-10-13 09:51:07 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 09:51:07 - Initializing Spring embedded WebApplicationContext
2025-10-13 09:51:07 - Root WebApplicationContext: initialization completed in 3617 ms
2025-10-13 09:51:08 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 09:51:08 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 09:51:08 - HikariPool-1 - Starting...
2025-10-13 09:51:09 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@9b3be1c
2025-10-13 09:51:09 - HikariPool-1 - Start completed.
2025-10-13 09:51:10 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 09:51:10 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 09:51:10 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 09:51:10 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 09:51:10 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 09:51:11 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 09:51:11 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 09:51:11 - Started SensorprocessorApplication in 8.149 seconds (process running for 9.319)
2025-10-13 09:51:14 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 09:51:14 - Initializing Servlet 'dispatcherServlet'
2025-10-13 09:51:14 - Detected StandardServletMultipartResolver
2025-10-13 09:51:14 - Detected AcceptHeaderLocaleResolver
2025-10-13 09:51:14 - Detected FixedThemeResolver
2025-10-13 09:51:14 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@194ea9bf
2025-10-13 09:51:14 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@64ea918a
2025-10-13 09:51:14 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 09:51:14 - Completed initialization in 15 ms
2025-10-13 09:51:15 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [158] milliseconds.
2025-10-13 09:51:15 - GET "/login", parameters={}
2025-10-13 09:51:15 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 09:51:15 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:16 - GET "/login", parameters={}
2025-10-13 09:51:16 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 09:51:16 - GET "/css/login-home.css", parameters={}
2025-10-13 09:51:16 - GET "/image/oeil.svg", parameters={}
2025-10-13 09:51:16 - Selected '*/*' given [*/*]
2025-10-13 09:51:16 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:16 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:51:16 - GET "/image/cacher.svg", parameters={}
2025-10-13 09:51:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:16 - Completed 200 OK
2025-10-13 09:51:17 - Completed 200 OK
2025-10-13 09:51:17 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:51:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:17 - Completed 200 OK
2025-10-13 09:51:19 - GET "/home", parameters={}
2025-10-13 09:51:19 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 09:51:19 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:19 - [THYMELEAF][http-nio-8080-exec-5][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:51:19 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:51:19 - GET "/css/header.css", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - GET "/css/login-home.css", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Resource not found
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - GET "/image/predictive.svg", parameters={}
2025-10-13 09:51:19 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:51:19 - Completed 404 NOT_FOUND
2025-10-13 09:51:19 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - GET "/image/user-icon.svg", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:51:19 - GET "/image/alerte.svg", parameters={}
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - GET "/image/config-icon.svg", parameters={}
2025-10-13 09:51:19 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 09:51:19 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Completed 200 OK
2025-10-13 09:51:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:51:19 - Writing [{timestamp=Mon Oct 13 09:51:19 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:51:19 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:51:21 - GET "/manage-gateways", parameters={}
2025-10-13 09:51:21 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 09:51:21 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:21 - [THYMELEAF][http-nio-8080-exec-1][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:51:21 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:51:21 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Resource not found
2025-10-13 09:51:21 - GET "/css/manageGateways.css", parameters={}
2025-10-13 09:51:21 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:51:21 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Completed 404 NOT_FOUND
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:51:21 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:21 - GET "/css/header.css", parameters={}
2025-10-13 09:51:21 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:51:21 - Writing [{timestamp=Mon Oct 13 09:51:21 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:51:21 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - GET "/image/search-icon.svg", parameters={}
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 09:51:21 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 09:51:21 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:21 - Completed 200 OK
2025-10-13 09:51:23 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 09:51:23 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 09:51:23 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:51:23 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Resource not found
2025-10-13 09:51:23 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 09:51:23 - GET "/css/header.css", parameters={}
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:51:23 - Completed 404 NOT_FOUND
2025-10-13 09:51:23 - GET "/image/thermostat.svg", parameters={}
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:51:23 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:51:23 - Writing [{timestamp=Mon Oct 13 09:51:23 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:51:23 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:51:23 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:23 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - Completed 200 OK
2025-10-13 09:51:23 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341883686", parameters={masked}
2025-10-13 09:51:23 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 09:51:23 - [6eb144a3] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341883751
2025-10-13 09:51:24 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:24 - Exiting but response remains open for further handling
2025-10-13 09:51:24 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:24 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:24 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:24 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341883686", parameters={masked}
2025-10-13 09:51:24 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 09:51:24 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 09:51:24 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:24 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:24 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760341883686", parameters={masked}
2025-10-13 09:51:24 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:24 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 09:51:24 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 09:51:24 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 09:51:24 - Nothing to write: null body
2025-10-13 09:51:24 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 09:51:24 - Exiting from "ERROR" dispatch, status 500
2025-10-13 09:51:24 - Servlet container error notification for "/error"
2025-10-13 09:51:24 - [71019460] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341883751
2025-10-13 09:51:24 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341883751
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:24 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:28 - GET "/manage-gateways", parameters={}
2025-10-13 09:51:28 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 09:51:28 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:28 - [THYMELEAF][http-nio-8080-exec-4][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:51:28 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Resource not found
2025-10-13 09:51:28 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:51:28 - Completed 404 NOT_FOUND
2025-10-13 09:51:28 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 09:51:28 - GET "/css/header.css", parameters={}
2025-10-13 09:51:28 - GET "/css/manageGateways.css", parameters={}
2025-10-13 09:51:28 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:51:28 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:51:28 - Writing [{timestamp=Mon Oct 13 09:51:28 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - GET "/image/search-icon.svg", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 09:51:28 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 09:51:28 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:28 - Completed 200 OK
2025-10-13 09:51:30 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 09:51:30 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 09:51:30 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Resource not found
2025-10-13 09:51:30 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 09:51:30 - Completed 404 NOT_FOUND
2025-10-13 09:51:30 - GET "/css/styles.css", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 09:51:30 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:30 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 09:51:30 - Writing [{timestamp=Mon Oct 13 09:51:30 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - Exiting from "ERROR" dispatch, status 404
2025-10-13 09:51:30 - GET "/image/thermostat.svg", parameters={}
2025-10-13 09:51:30 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 09:51:30 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - GET "/css/header.css", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 09:51:30 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 09:51:30 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 09:51:30 - Completed 200 OK
2025-10-13 09:51:30 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341890878", parameters={masked}
2025-10-13 09:51:30 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 09:51:30 - [46380638] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341890930
2025-10-13 09:51:30 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:30 - Exiting but response remains open for further handling
2025-10-13 09:51:30 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:30 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:30 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 09:51:30 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760341890878", parameters={masked}
2025-10-13 09:51:30 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 09:51:30 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 09:51:30 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:30 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:30 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760341890878", parameters={masked}
2025-10-13 09:51:30 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 09:51:30 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 09:51:30 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 09:51:30 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 09:51:31 - Nothing to write: null body
2025-10-13 09:51:31 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 09:51:31 - Exiting from "ERROR" dispatch, status 500
2025-10-13 09:51:31 - Servlet container error notification for "/error"
2025-10-13 09:51:31 - [729aef55] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341890930
2025-10-13 09:51:31 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-67B7F807F2162B8E6B03CBCF5EC46FF2-1760341890930
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 09:51:31 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:00:39 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 10:00:39 - Graceful shutdown complete
2025-10-13 10:00:41 - HikariPool-1 - Shutdown initiated...
2025-10-13 10:00:41 - HikariPool-1 - Shutdown completed.
2025-10-13 10:00:47 - Starting SensorprocessorApplication using Java 17.0.12 with PID 21236 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 10:00:47 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 10:00:49 - Tomcat initialized with port 8080 (http)
2025-10-13 10:00:49 - Starting service [Tomcat]
2025-10-13 10:00:49 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 10:00:49 - Initializing Spring embedded WebApplicationContext
2025-10-13 10:00:49 - Root WebApplicationContext: initialization completed in 2543 ms
2025-10-13 10:00:49 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 10:00:49 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 10:00:49 - HikariPool-1 - Starting...
2025-10-13 10:00:50 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@35d7386b
2025-10-13 10:00:50 - HikariPool-1 - Start completed.
2025-10-13 10:00:51 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 10:00:51 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 10:00:51 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 10:00:51 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 10:00:51 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 10:00:51 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 10:00:51 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 10:00:52 - Started SensorprocessorApplication in 5.82 seconds (process running for 6.575)
2025-10-13 10:01:46 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 10:01:46 - Initializing Servlet 'dispatcherServlet'
2025-10-13 10:01:46 - Detected StandardServletMultipartResolver
2025-10-13 10:01:46 - Detected AcceptHeaderLocaleResolver
2025-10-13 10:01:46 - Detected FixedThemeResolver
2025-10-13 10:01:46 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@4cee35a0
2025-10-13 10:01:46 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@235c165
2025-10-13 10:01:46 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 10:01:46 - Completed initialization in 8 ms
2025-10-13 10:01:46 - GET "/login", parameters={}
2025-10-13 10:01:46 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:01:46 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - GET "/css/styles.css", parameters={}
2025-10-13 10:01:48 - GET "/css/login-home.css", parameters={}
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - GET "/image/cacher.svg", parameters={}
2025-10-13 10:01:48 - GET "/image/oeil.svg", parameters={}
2025-10-13 10:01:48 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - GET "/login", parameters={}
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - Selected '*/*' given [*/*]
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:48 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:01:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:48 - Completed 200 OK
2025-10-13 10:01:50 - GET "/home", parameters={}
2025-10-13 10:01:50 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:01:50 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:01:50 - [THYMELEAF][http-nio-8080-exec-2][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - GET "/css/styles.css", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Resource not found
2025-10-13 10:01:50 - GET "/css/header.css", parameters={}
2025-10-13 10:01:50 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:01:50 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - GET "/css/login-home.css", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:01:50 - Completed 404 NOT_FOUND
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:01:50 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:01:50 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:01:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:50 - Completed 200 OK
2025-10-13 10:01:51 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:01:51 - Writing [{timestamp=Mon Oct 13 10:01:50 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:01:51 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:01:52 - GET "/manage-gateways", parameters={}
2025-10-13 10:01:52 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:01:52 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:01:52 - [THYMELEAF][http-nio-8080-exec-10][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:01:52 - GET "/css/header.css", parameters={}
2025-10-13 10:01:52 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - GET "/css/styles.css", parameters={}
2025-10-13 10:01:52 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:01:52 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - Resource not found
2025-10-13 10:01:52 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:01:52 - Completed 404 NOT_FOUND
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:52 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:01:52 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:52 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:52 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:01:52 - Writing [{timestamp=Mon Oct 13 10:01:52 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:01:52 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:01:52 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:52 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:52 - Completed 200 OK
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:53 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:01:53 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:01:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:53 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:01:53 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:01:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:53 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:01:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:53 - Completed 200 OK
2025-10-13 10:01:54 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:01:54 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:01:54 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - GET "/css/styles.css", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - Resource not found
2025-10-13 10:01:54 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:01:54 - GET "/css/header.css", parameters={}
2025-10-13 10:01:54 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:01:54 - Completed 404 NOT_FOUND
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:01:54 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:01:54 - Writing [{timestamp=Mon Oct 13 10:01:54 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:01:54 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:01:54 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:01:54 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:01:54 - Completed 200 OK
2025-10-13 10:01:54 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342514760", parameters={masked}
2025-10-13 10:01:54 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:01:55 - [2a1c3f09] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342514837
2025-10-13 10:01:55 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:01:55 - Exiting but response remains open for further handling
2025-10-13 10:01:55 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:01:55 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:01:55 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:01:55 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342514760", parameters={masked}
2025-10-13 10:01:55 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:01:55 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:01:55 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:01:55 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:01:55 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342514760", parameters={masked}
2025-10-13 10:01:55 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:01:55 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:01:55 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:01:55 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:01:55 - Nothing to write: null body
2025-10-13 10:01:55 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:01:55 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:01:55 - Servlet container error notification for "/error"
2025-10-13 10:01:55 - [2e6f26bd] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342514837
2025-10-13 10:01:55 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342514837
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:01:55 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:32 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:02:32 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:02:32 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:02:32 - Completed 200 OK
2025-10-13 10:02:32 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:02:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:32 - GET "/css/styles.css", parameters={}
2025-10-13 10:02:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:32 - Completed 200 OK
2025-10-13 10:02:32 - Resource not found
2025-10-13 10:02:33 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:02:33 - Completed 404 NOT_FOUND
2025-10-13 10:02:33 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:02:33 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:02:33 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:02:33 - Writing [{timestamp=Mon Oct 13 10:02:33 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:02:33 - GET "/css/header.css", parameters={}
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:02:33 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:02:33 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:02:33 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:02:33 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - Completed 200 OK
2025-10-13 10:02:33 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342553187", parameters={masked}
2025-10-13 10:02:33 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:02:33 - [5561111a] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342553220
2025-10-13 10:02:33 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:02:33 - Exiting but response remains open for further handling
2025-10-13 10:02:33 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:33 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:02:33 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:02:33 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342553187", parameters={masked}
2025-10-13 10:02:33 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:02:33 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:02:33 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:33 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:33 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342553187", parameters={masked}
2025-10-13 10:02:33 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:02:33 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:02:33 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:02:33 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:02:33 - Nothing to write: null body
2025-10-13 10:02:33 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:02:33 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:02:33 - Servlet container error notification for "/error"
2025-10-13 10:02:33 - [2bbe71fa] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342553220
2025-10-13 10:02:33 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-9C843FB4C93FE89B67894A92173F34E7-1760342553220
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:33 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:02:36 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 10:02:36 - Graceful shutdown complete
2025-10-13 10:02:38 - HikariPool-1 - Shutdown initiated...
2025-10-13 10:02:38 - HikariPool-1 - Shutdown completed.
2025-10-13 10:02:43 - Starting SensorprocessorApplication using Java 17.0.12 with PID 20048 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 10:02:43 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 10:02:45 - Tomcat initialized with port 8080 (http)
2025-10-13 10:02:45 - Starting service [Tomcat]
2025-10-13 10:02:45 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 10:02:45 - Initializing Spring embedded WebApplicationContext
2025-10-13 10:02:45 - Root WebApplicationContext: initialization completed in 2501 ms
2025-10-13 10:02:46 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 10:02:46 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 10:02:46 - HikariPool-1 - Starting...
2025-10-13 10:02:46 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@35d7386b
2025-10-13 10:02:46 - HikariPool-1 - Start completed.
2025-10-13 10:02:47 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 10:02:47 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 10:02:47 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 10:02:47 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 10:02:48 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 10:02:48 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 10:02:48 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 10:02:48 - Started SensorprocessorApplication in 5.969 seconds (process running for 6.595)
2025-10-13 10:02:55 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 10:02:55 - Initializing Servlet 'dispatcherServlet'
2025-10-13 10:02:55 - Detected StandardServletMultipartResolver
2025-10-13 10:02:55 - Detected AcceptHeaderLocaleResolver
2025-10-13 10:02:55 - Detected FixedThemeResolver
2025-10-13 10:02:55 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@76459d12
2025-10-13 10:02:55 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@6c3b33aa
2025-10-13 10:02:55 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 10:02:55 - Completed initialization in 6 ms
2025-10-13 10:02:55 - GET "/login", parameters={}
2025-10-13 10:02:55 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:02:55 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - GET "/css/styles.css", parameters={}
2025-10-13 10:02:55 - GET "/css/login-home.css", parameters={}
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - GET "/image/cacher.svg", parameters={}
2025-10-13 10:02:55 - GET "/image/oeil.svg", parameters={}
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - GET "/login", parameters={}
2025-10-13 10:02:55 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:02:55 - Selected '*/*' given [*/*]
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:55 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:02:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:55 - Completed 200 OK
2025-10-13 10:02:57 - GET "/home", parameters={}
2025-10-13 10:02:57 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:02:57 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:02:57 - [THYMELEAF][http-nio-8080-exec-2][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - GET "/css/styles.css", parameters={}
2025-10-13 10:02:57 - GET "/css/header.css", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Resource not found
2025-10-13 10:02:57 - GET "/css/login-home.css", parameters={}
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:02:57 - Completed 404 NOT_FOUND
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:02:57 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:02:57 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:02:57 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:02:57 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:02:57 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:02:57 - Writing [{timestamp=Mon Oct 13 10:02:57 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:02:57 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:02:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:57 - Completed 200 OK
2025-10-13 10:02:57 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:02:59 - GET "/manage-gateways", parameters={}
2025-10-13 10:02:59 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:02:59 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:02:59 - [THYMELEAF][http-nio-8080-exec-6][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:02:59 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:02:59 - GET "/css/styles.css", parameters={}
2025-10-13 10:02:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:59 - GET "/css/header.css", parameters={}
2025-10-13 10:02:59 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:02:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:59 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:02:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:02:59 - Resource not found
2025-10-13 10:02:59 - Completed 200 OK
2025-10-13 10:02:59 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:02:59 - Completed 404 NOT_FOUND
2025-10-13 10:02:59 - Completed 200 OK
2025-10-13 10:02:59 - Completed 200 OK
2025-10-13 10:02:59 - Completed 200 OK
2025-10-13 10:02:59 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:03:00 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:03:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:03:00 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:03:00 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:03:00 - Writing [{timestamp=Mon Oct 13 10:03:00 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:03:00 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:00 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:03:00 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:00 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:03:00 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:00 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:03:00 - Completed 200 OK
2025-10-13 10:03:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:01 - Completed 200 OK
2025-10-13 10:03:01 - Completed 200 OK
2025-10-13 10:03:01 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:03:01 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:03:01 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:03:01 - Completed 200 OK
2025-10-13 10:03:01 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:03:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:01 - GET "/css/styles.css", parameters={}
2025-10-13 10:03:01 - Resource not found
2025-10-13 10:03:01 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:03:01 - GET "/css/header.css", parameters={}
2025-10-13 10:03:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:01 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:03:01 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:03:01 - Completed 404 NOT_FOUND
2025-10-13 10:03:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:02 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:03:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:02 - Writing [{timestamp=Mon Oct 13 10:03:02 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:03:02 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:03:02 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:03:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:03:02 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:02 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - Completed 200 OK
2025-10-13 10:03:02 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342582289", parameters={masked}
2025-10-13 10:03:02 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:03:02 - [2b708165] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-5DB576271CDE9C952FC620A5D6CFC8E1-1760342582362
2025-10-13 10:03:03 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:03:03 - Exiting but response remains open for further handling
2025-10-13 10:03:03 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:03:04 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:03:04 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:03:04 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342582289", parameters={masked}
2025-10-13 10:03:04 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:03:04 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:03:04 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:03:04 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:03:04 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342582289", parameters={masked}
2025-10-13 10:03:04 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:03:04 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:03:04 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:03:04 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:03:04 - Nothing to write: null body
2025-10-13 10:03:04 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:03:04 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:03:04 - Servlet container error notification for "/error"
2025-10-13 10:03:04 - [5c5f6dd8] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-5DB576271CDE9C952FC620A5D6CFC8E1-1760342582362
2025-10-13 10:03:04 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-5DB576271CDE9C952FC620A5D6CFC8E1-1760342582362
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:03:04 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:03:43 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 10:03:43 - Graceful shutdown complete
2025-10-13 10:03:45 - HikariPool-1 - Shutdown initiated...
2025-10-13 10:03:45 - HikariPool-1 - Shutdown completed.
2025-10-13 10:03:50 - Starting SensorprocessorApplication using Java 17.0.12 with PID 15372 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 10:03:50 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 10:03:52 - Tomcat initialized with port 8080 (http)
2025-10-13 10:03:52 - Starting service [Tomcat]
2025-10-13 10:03:52 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 10:03:52 - Initializing Spring embedded WebApplicationContext
2025-10-13 10:03:52 - Root WebApplicationContext: initialization completed in 2802 ms
2025-10-13 10:03:53 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 10:03:53 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 10:03:53 - HikariPool-1 - Starting...
2025-10-13 10:03:53 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@35d7386b
2025-10-13 10:03:53 - HikariPool-1 - Start completed.
2025-10-13 10:03:55 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 10:03:55 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 10:03:55 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 10:03:55 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 10:03:56 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 10:03:56 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 10:03:56 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 10:03:56 - Started SensorprocessorApplication in 7.414 seconds (process running for 8.043)
2025-10-13 10:03:56 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 10:03:56 - Initializing Servlet 'dispatcherServlet'
2025-10-13 10:03:56 - Detected StandardServletMultipartResolver
2025-10-13 10:03:56 - Detected AcceptHeaderLocaleResolver
2025-10-13 10:03:56 - Detected FixedThemeResolver
2025-10-13 10:03:56 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@25dbc59f
2025-10-13 10:03:56 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@359af959
2025-10-13 10:03:56 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 10:03:56 - Completed initialization in 9 ms
2025-10-13 10:03:57 - GET "/login", parameters={}
2025-10-13 10:03:57 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:03:57 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - GET "/css/styles.css", parameters={}
2025-10-13 10:03:57 - GET "/image/oeil.svg", parameters={}
2025-10-13 10:03:57 - GET "/image/cacher.svg", parameters={}
2025-10-13 10:03:57 - GET "/css/login-home.css", parameters={}
2025-10-13 10:03:57 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - GET "/login", parameters={}
2025-10-13 10:03:57 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:03:57 - Selected '*/*' given [*/*]
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:03:57 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:03:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:03:57 - Completed 200 OK
2025-10-13 10:04:00 - GET "/home", parameters={}
2025-10-13 10:04:00 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:04:00 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:00 - [THYMELEAF][http-nio-8080-exec-6][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:04:00 - "ERROR" dispatch for POST "/error", parameters={masked}
2025-10-13 10:04:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)
2025-10-13 10:04:00 - Selected 'text/html' given [text/html, text/html;q=0.8]
2025-10-13 10:04:00 - Exiting from "ERROR" dispatch, status 403
2025-10-13 10:04:00 - Completed 200 OK
2025-10-13 10:04:00 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:00 - Resource not found
2025-10-13 10:04:00 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:00 - Completed 404 NOT_FOUND
2025-10-13 10:04:00 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:01 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:01 - Writing [{timestamp=Mon Oct 13 10:04:00 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:01 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:02 - "ERROR" dispatch for POST "/error", parameters={masked}
2025-10-13 10:04:02 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)
2025-10-13 10:04:02 - Selected 'text/html' given [text/html, text/html;q=0.8]
2025-10-13 10:04:02 - Exiting from "ERROR" dispatch, status 403
2025-10-13 10:04:02 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:02 - Resource not found
2025-10-13 10:04:02 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:02 - Completed 404 NOT_FOUND
2025-10-13 10:04:02 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:02 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:02 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:02 - Writing [{timestamp=Mon Oct 13 10:04:02 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:02 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:03 - "ERROR" dispatch for POST "/error", parameters={masked}
2025-10-13 10:04:03 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)
2025-10-13 10:04:03 - Selected 'text/html' given [text/html, text/html;q=0.8]
2025-10-13 10:04:03 - Exiting from "ERROR" dispatch, status 403
2025-10-13 10:04:03 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:03 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:03 - Resource not found
2025-10-13 10:04:03 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:03 - Completed 404 NOT_FOUND
2025-10-13 10:04:03 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:03 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:03 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:03 - Writing [{timestamp=Mon Oct 13 10:04:03 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:03 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:04 - "ERROR" dispatch for POST "/error", parameters={masked}
2025-10-13 10:04:04 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#errorHtml(HttpServletRequest, HttpServletResponse)
2025-10-13 10:04:04 - Selected 'text/html' given [text/html, text/html;q=0.8]
2025-10-13 10:04:04 - Exiting from "ERROR" dispatch, status 403
2025-10-13 10:04:04 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:04 - Resource not found
2025-10-13 10:04:04 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:04 - Completed 404 NOT_FOUND
2025-10-13 10:04:04 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:04 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:04 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:04 - Writing [{timestamp=Mon Oct 13 10:04:04 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:04 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:05 - GET "/login", parameters={}
2025-10-13 10:04:05 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:04:05 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:05 - Completed 200 OK
2025-10-13 10:04:05 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:05 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:05 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:05 - Resource not found
2025-10-13 10:04:05 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:05 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:05 - Completed 404 NOT_FOUND
2025-10-13 10:04:05 - Completed 200 OK
2025-10-13 10:04:05 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:05 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:05 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:05 - Writing [{timestamp=Mon Oct 13 10:04:05 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:05 - GET "/css/login-home.css", parameters={}
2025-10-13 10:04:05 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:05 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:05 - Completed 200 OK
2025-10-13 10:04:07 - GET "/home", parameters={}
2025-10-13 10:04:07 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:04:07 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:07 - [THYMELEAF][http-nio-8080-exec-1][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - Resource not found
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:07 - Completed 404 NOT_FOUND
2025-10-13 10:04:07 - GET "/css/header.css", parameters={}
2025-10-13 10:04:07 - GET "/css/login-home.css", parameters={}
2025-10-13 10:04:07 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:07 - Writing [{timestamp=Mon Oct 13 10:04:07 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:07 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:04:07 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:04:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:07 - Completed 200 OK
2025-10-13 10:04:09 - GET "/manage-gateways", parameters={}
2025-10-13 10:04:09 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:04:09 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:09 - [THYMELEAF][http-nio-8080-exec-9][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:04:09 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:09 - Resource not found
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:09 - Completed 404 NOT_FOUND
2025-10-13 10:04:09 - GET "/css/header.css", parameters={}
2025-10-13 10:04:09 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:04:09 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:09 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:09 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:09 - Writing [{timestamp=Mon Oct 13 10:04:09 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:04:09 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:04:09 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:09 - Completed 200 OK
2025-10-13 10:04:10 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:04:10 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:04:10 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - GET "/css/header.css", parameters={}
2025-10-13 10:04:10 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:04:10 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:04:10 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Resource not found
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:10 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:04:10 - Completed 404 NOT_FOUND
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:10 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:10 - Writing [{timestamp=Mon Oct 13 10:04:10 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:10 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:10 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:04:10 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:04:10 - Completed 200 OK
2025-10-13 10:04:10 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342650660", parameters={masked}
2025-10-13 10:04:10 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:04:10 - [4a8b9dab] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342650723
2025-10-13 10:04:11 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:11 - Exiting but response remains open for further handling
2025-10-13 10:04:11 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:11 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:11 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:11 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342650660", parameters={masked}
2025-10-13 10:04:11 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:04:11 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:04:11 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:11 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:11 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342650660", parameters={masked}
2025-10-13 10:04:11 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:11 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:04:11 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:04:11 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:04:11 - Nothing to write: null body
2025-10-13 10:04:11 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:04:11 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:04:11 - Servlet container error notification for "/error"
2025-10-13 10:04:11 - [5d680fe0] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342650723
2025-10-13 10:04:11 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342650723
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:11 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:48 - GET "/manage-gateways", parameters={}
2025-10-13 10:04:48 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:04:48 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:48 - [THYMELEAF][http-nio-8080-exec-3][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Resource not found
2025-10-13 10:04:48 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:48 - Completed 404 NOT_FOUND
2025-10-13 10:04:48 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:48 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:48 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:48 - Writing [{timestamp=Mon Oct 13 10:04:48 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:48 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:48 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:04:48 - GET "/css/header.css", parameters={}
2025-10-13 10:04:48 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:04:48 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:48 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:04:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:48 - Completed 200 OK
2025-10-13 10:04:49 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:04:49 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:04:49 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:04:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:49 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:04:49 - Completed 200 OK
2025-10-13 10:04:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:49 - Completed 200 OK
2025-10-13 10:04:49 - Completed 200 OK
2025-10-13 10:04:49 - Completed 200 OK
2025-10-13 10:04:49 - Completed 200 OK
2025-10-13 10:04:51 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:04:51 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:04:51 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:04:51 - GET "/css/styles.css", parameters={}
2025-10-13 10:04:51 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:04:51 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - GET "/css/header.css", parameters={}
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Resource not found
2025-10-13 10:04:51 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:04:51 - Completed 404 NOT_FOUND
2025-10-13 10:04:51 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:04:51 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:04:51 - Writing [{timestamp=Mon Oct 13 10:04:51 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:04:51 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:04:51 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:04:51 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:04:51 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - Completed 200 OK
2025-10-13 10:04:51 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342691285", parameters={masked}
2025-10-13 10:04:51 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:04:51 - [5e09647d] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342691363
2025-10-13 10:04:51 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:51 - Exiting but response remains open for further handling
2025-10-13 10:04:51 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:51 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:51 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:04:51 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342691285", parameters={masked}
2025-10-13 10:04:51 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:04:51 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:04:51 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:51 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:51 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342691285", parameters={masked}
2025-10-13 10:04:51 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:04:51 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:04:51 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:04:51 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:04:51 - Nothing to write: null body
2025-10-13 10:04:51 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:04:51 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:04:51 - Servlet container error notification for "/error"
2025-10-13 10:04:51 - [10301af9] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342691363
2025-10-13 10:04:51 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-892D59D5497F3B731FA9082D358D4BCD-1760342691363
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:04:51 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:06:31 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 10:06:31 - Graceful shutdown complete
2025-10-13 10:06:33 - HikariPool-1 - Shutdown initiated...
2025-10-13 10:06:33 - HikariPool-1 - Shutdown completed.
2025-10-13 10:06:37 - Starting SensorprocessorApplication using Java 17.0.12 with PID 11760 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 10:06:37 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 10:06:40 - Tomcat initialized with port 8080 (http)
2025-10-13 10:06:40 - Starting service [Tomcat]
2025-10-13 10:06:40 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 10:06:40 - Initializing Spring embedded WebApplicationContext
2025-10-13 10:06:40 - Root WebApplicationContext: initialization completed in 2511 ms
2025-10-13 10:06:40 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 10:06:40 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 10:06:40 - HikariPool-1 - Starting...
2025-10-13 10:06:40 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@69f080ad
2025-10-13 10:06:40 - HikariPool-1 - Start completed.
2025-10-13 10:06:41 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 10:06:41 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 10:06:41 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 10:06:42 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 10:06:42 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 10:06:42 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 10:06:42 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 10:06:42 - Started SensorprocessorApplication in 5.89 seconds (process running for 6.493)
2025-10-13 10:06:51 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 10:06:51 - Initializing Servlet 'dispatcherServlet'
2025-10-13 10:06:51 - Detected StandardServletMultipartResolver
2025-10-13 10:06:51 - Detected AcceptHeaderLocaleResolver
2025-10-13 10:06:51 - Detected FixedThemeResolver
2025-10-13 10:06:51 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@4fb282aa
2025-10-13 10:06:51 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@7c7bb393
2025-10-13 10:06:51 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 10:06:51 - Completed initialization in 11 ms
2025-10-13 10:06:51 - GET "/login", parameters={}
2025-10-13 10:06:51 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:06:51 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - GET "/css/styles.css", parameters={}
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:06:51 - GET "/css/login-home.css", parameters={}
2025-10-13 10:06:51 - GET "/image/cacher.svg", parameters={}
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - GET "/image/oeil.svg", parameters={}
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - GET "/login", parameters={}
2025-10-13 10:06:51 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:06:51 - Selected '*/*' given [*/*]
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:51 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:06:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:51 - Completed 200 OK
2025-10-13 10:06:53 - GET "/home", parameters={}
2025-10-13 10:06:53 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:06:53 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:06:53 - [THYMELEAF][http-nio-8080-exec-2][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:06:53 - GET "/css/styles.css", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Resource not found
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - GET "/css/header.css", parameters={}
2025-10-13 10:06:53 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:06:53 - GET "/css/login-home.css", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:06:53 - Completed 404 NOT_FOUND
2025-10-13 10:06:53 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:06:53 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:06:53 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:06:53 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:53 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:06:53 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:06:53 - Completed 200 OK
2025-10-13 10:06:54 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:06:54 - Writing [{timestamp=Mon Oct 13 10:06:54 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:06:54 - Completed 200 OK
2025-10-13 10:06:54 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:06:55 - GET "/manage-gateways", parameters={}
2025-10-13 10:06:55 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:06:55 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:06:56 - [THYMELEAF][http-nio-8080-exec-8][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:06:56 - GET "/css/styles.css", parameters={}
2025-10-13 10:06:56 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:06:56 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:06:56 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - GET "/css/header.css", parameters={}
2025-10-13 10:06:56 - Resource not found
2025-10-13 10:06:56 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - Completed 404 NOT_FOUND
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:56 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:56 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:06:56 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:06:56 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:06:56 - Writing [{timestamp=Mon Oct 13 10:06:56 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:06:56 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:06:56 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:56 - Completed 200 OK
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:57 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:06:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:57 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:06:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:57 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:06:57 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:06:57 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:06:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:57 - Completed 200 OK
2025-10-13 10:06:58 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:06:58 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:06:58 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - GET "/css/styles.css", parameters={}
2025-10-13 10:06:58 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:06:58 - Resource not found
2025-10-13 10:06:58 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:06:58 - Completed 404 NOT_FOUND
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:06:58 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:06:58 - GET "/css/header.css", parameters={}
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:06:58 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Writing [{timestamp=Mon Oct 13 10:06:58 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:06:58 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:06:58 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:06:58 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:06:58 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:06:58 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - Completed 200 OK
2025-10-13 10:06:58 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342818959", parameters={masked}
2025-10-13 10:06:58 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:06:59 - [67d11def] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342819012
2025-10-13 10:06:59 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:06:59 - Exiting but response remains open for further handling
2025-10-13 10:07:00 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:00 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:07:00 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:07:00 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342818959", parameters={masked}
2025-10-13 10:07:00 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:07:00 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:07:00 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:00 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:00 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342818959", parameters={masked}
2025-10-13 10:07:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:07:00 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:07:00 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:07:00 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:07:00 - Nothing to write: null body
2025-10-13 10:07:00 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:07:00 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:07:00 - Servlet container error notification for "/error"
2025-10-13 10:07:00 - [429998bc] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342819012
2025-10-13 10:07:00 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342819012
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:00 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:32 - GET "/manage-gateways", parameters={}
2025-10-13 10:07:32 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:07:32 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:07:32 - [THYMELEAF][http-nio-8080-exec-1][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - GET "/css/styles.css", parameters={}
2025-10-13 10:07:32 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Resource not found
2025-10-13 10:07:32 - GET "/css/header.css", parameters={}
2025-10-13 10:07:32 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:07:32 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:07:32 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:07:32 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:07:32 - Completed 404 NOT_FOUND
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:07:32 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:07:32 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:07:32 - Writing [{timestamp=Mon Oct 13 10:07:32 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:07:32 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:32 - Completed 200 OK
2025-10-13 10:07:33 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:07:33 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:07:33 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:07:33 - Completed 200 OK
2025-10-13 10:07:34 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:07:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:34 - Resource not found
2025-10-13 10:07:34 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:07:34 - Completed 404 NOT_FOUND
2025-10-13 10:07:34 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:07:34 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:07:34 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:07:34 - Writing [{timestamp=Mon Oct 13 10:07:34 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:07:34 - GET "/css/styles.css", parameters={}
2025-10-13 10:07:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:34 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:07:34 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:07:34 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:07:34 - GET "/css/header.css", parameters={}
2025-10-13 10:07:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:07:34 - Completed 200 OK
2025-10-13 10:07:34 - Completed 200 OK
2025-10-13 10:07:34 - Completed 200 OK
2025-10-13 10:07:34 - Completed 200 OK
2025-10-13 10:07:34 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342854167", parameters={masked}
2025-10-13 10:07:34 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:07:34 - [7659dfe6] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342854263
2025-10-13 10:07:34 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:07:34 - Exiting but response remains open for further handling
2025-10-13 10:07:34 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:34 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:07:34 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:07:34 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760342854167", parameters={masked}
2025-10-13 10:07:34 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:07:34 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:07:34 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:34 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:34 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760342854167", parameters={masked}
2025-10-13 10:07:34 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:07:34 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:07:34 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:07:34 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:07:34 - Nothing to write: null body
2025-10-13 10:07:34 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:07:34 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:07:34 - Servlet container error notification for "/error"
2025-10-13 10:07:34 - [1f203d00] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342854263
2025-10-13 10:07:34 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-FB619AC75342E1D253735F344B8C2480-1760342854263
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:07:34 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:16:23 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 10:16:24 - Graceful shutdown complete
2025-10-13 10:16:26 - HikariPool-1 - Shutdown initiated...
2025-10-13 10:16:26 - HikariPool-1 - Shutdown completed.
2025-10-13 10:16:31 - Starting SensorprocessorApplication using Java 17.0.12 with PID 28168 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 10:16:31 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 10:16:36 - Tomcat initialized with port 8080 (http)
2025-10-13 10:16:36 - Starting service [Tomcat]
2025-10-13 10:16:36 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 10:16:36 - Initializing Spring embedded WebApplicationContext
2025-10-13 10:16:36 - Root WebApplicationContext: initialization completed in 4287 ms
2025-10-13 10:16:36 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 10:16:36 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 10:16:36 - HikariPool-1 - Starting...
2025-10-13 10:16:37 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@718989fa
2025-10-13 10:16:37 - HikariPool-1 - Start completed.
2025-10-13 10:16:39 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 10:16:41 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 10:16:41 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 10:16:42 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 10:16:44 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 10:16:44 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 10:16:46 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 10:16:47 - Started SensorprocessorApplication in 16.05 seconds (process running for 17.212)
2025-10-13 10:16:48 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 10:16:48 - Initializing Servlet 'dispatcherServlet'
2025-10-13 10:16:48 - Detected StandardServletMultipartResolver
2025-10-13 10:16:48 - Detected AcceptHeaderLocaleResolver
2025-10-13 10:16:48 - Detected FixedThemeResolver
2025-10-13 10:16:48 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@3c04b772
2025-10-13 10:16:48 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@6cf0b542
2025-10-13 10:16:48 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 10:16:48 - Completed initialization in 20 ms
2025-10-13 10:16:48 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [193] milliseconds.
2025-10-13 10:16:48 - GET "/login", parameters={}
2025-10-13 10:16:48 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:16:48 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - GET "/css/styles.css", parameters={}
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:16:50 - GET "/image/cacher.svg", parameters={}
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - GET "/css/login-home.css", parameters={}
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - GET "/image/oeil.svg", parameters={}
2025-10-13 10:16:50 - GET "/login", parameters={}
2025-10-13 10:16:50 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:16:50 - Selected '*/*' given [*/*]
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:50 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:16:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:50 - Completed 200 OK
2025-10-13 10:16:53 - GET "/home", parameters={}
2025-10-13 10:16:53 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:16:53 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:16:53 - [THYMELEAF][http-nio-8080-exec-1][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - GET "/css/login-home.css", parameters={}
2025-10-13 10:16:53 - GET "/css/styles.css", parameters={}
2025-10-13 10:16:53 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:16:53 - GET "/css/header.css", parameters={}
2025-10-13 10:16:53 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:16:53 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Resource not found
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:16:53 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:16:53 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:16:53 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:16:53 - Completed 404 NOT_FOUND
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:16:53 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:16:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:53 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:16:53 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Completed 200 OK
2025-10-13 10:16:53 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:16:53 - Writing [{timestamp=Mon Oct 13 10:16:53 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:16:53 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:16:59 - GET "/manage-gateways", parameters={}
2025-10-13 10:16:59 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:16:59 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:16:59 - [THYMELEAF][http-nio-8080-exec-5][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:16:59 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:16:59 - GET "/css/styles.css", parameters={}
2025-10-13 10:16:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:59 - GET "/css/header.css", parameters={}
2025-10-13 10:16:59 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:16:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:16:59 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Resource not found
2025-10-13 10:17:00 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:00 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:17:00 - Completed 404 NOT_FOUND
2025-10-13 10:17:00 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Writing [{timestamp=Mon Oct 13 10:17:00 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:00 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:17:00 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:17:00 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:17:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:00 - Completed 200 OK
2025-10-13 10:17:06 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:06 - Resource not found
2025-10-13 10:17:06 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:06 - Completed 404 NOT_FOUND
2025-10-13 10:17:06 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:06 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:06 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:06 - GET "/css/login-home.css", parameters={}
2025-10-13 10:17:06 - GET "/css/header.css", parameters={}
2025-10-13 10:17:06 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:06 - Writing [{timestamp=Mon Oct 13 10:17:06 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:06 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:06 - Completed 200 OK
2025-10-13 10:17:06 - Completed 200 OK
2025-10-13 10:17:06 - Completed 200 OK
2025-10-13 10:17:06 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:06 - Resource not found
2025-10-13 10:17:06 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:06 - Completed 404 NOT_FOUND
2025-10-13 10:17:06 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:06 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:06 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:06 - Writing [{timestamp=Mon Oct 13 10:17:06 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:06 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:10 - GET "/users/user5", parameters={}
2025-10-13 10:17:10 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 10:17:10 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:17:10 - [THYMELEAF][http-nio-8080-exec-3][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:10 - Resource not found
2025-10-13 10:17:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:10 - Completed 404 NOT_FOUND
2025-10-13 10:17:10 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:10 - GET "/css/header.css", parameters={}
2025-10-13 10:17:10 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:10 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:10 - GET "/css/profile.css", parameters={}
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:10 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:10 - Writing [{timestamp=Mon Oct 13 10:17:10 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:17:10 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:10 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:10 - Completed 200 OK
2025-10-13 10:17:12 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:12 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:12 - Resource not found
2025-10-13 10:17:12 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:12 - Completed 404 NOT_FOUND
2025-10-13 10:17:12 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:12 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:12 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:12 - Writing [{timestamp=Mon Oct 13 10:17:12 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:12 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:12 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:12 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:12 - Resource not found
2025-10-13 10:17:12 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:12 - Completed 404 NOT_FOUND
2025-10-13 10:17:12 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:12 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:12 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:12 - Writing [{timestamp=Mon Oct 13 10:17:12 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:12 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:29 - GET "/manage-gateways", parameters={}
2025-10-13 10:17:29 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:17:29 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:17:29 - [THYMELEAF][http-nio-8080-exec-7][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:17:30 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/css/header.css", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - Resource not found
2025-10-13 10:17:30 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:30 - Completed 404 NOT_FOUND
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:30 - Writing [{timestamp=Mon Oct 13 10:17:30 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:30 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:17:30 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:30 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:17:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:30 - Completed 200 OK
2025-10-13 10:17:31 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 10:17:31 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:17:31 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:17:31 - Completed 200 OK
2025-10-13 10:17:31 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:31 - Resource not found
2025-10-13 10:17:31 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:31 - Completed 404 NOT_FOUND
2025-10-13 10:17:31 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:31 - GET "/css/header.css", parameters={}
2025-10-13 10:17:31 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:31 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:31 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:31 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:31 - Writing [{timestamp=Mon Oct 13 10:17:31 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:31 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:17:31 - Completed 200 OK
2025-10-13 10:17:31 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:31 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:17:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:32 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:17:32 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:32 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:32 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - Completed 200 OK
2025-10-13 10:17:32 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760343452482", parameters={masked}
2025-10-13 10:17:32 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:17:33 - [49d1afe9] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-739E3B79720354AA8C9ACD565E1C9FE0-1760343452684
2025-10-13 10:17:33 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:17:33 - Exiting but response remains open for further handling
2025-10-13 10:17:34 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:17:34 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:17:34 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 10:17:34 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760343452482", parameters={masked}
2025-10-13 10:17:34 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:17:34 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:17:34 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:17:34 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:17:34 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760343452482", parameters={masked}
2025-10-13 10:17:34 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:34 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:17:34 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:17:34 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:17:34 - Nothing to write: null body
2025-10-13 10:17:34 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:17:34 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:17:34 - Servlet container error notification for "/error"
2025-10-13 10:17:34 - [7fc64be2] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-739E3B79720354AA8C9ACD565E1C9FE0-1760343452684
2025-10-13 10:17:34 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-739E3B79720354AA8C9ACD565E1C9FE0-1760343452684
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:17:34 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:17:42 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:42 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:42 - GET "/css/header.css", parameters={}
2025-10-13 10:17:42 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:17:42 - Resource not found
2025-10-13 10:17:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:42 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:42 - Completed 404 NOT_FOUND
2025-10-13 10:17:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:42 - Completed 200 OK
2025-10-13 10:17:42 - Completed 200 OK
2025-10-13 10:17:42 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:42 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:42 - Writing [{timestamp=Mon Oct 13 10:17:42 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:42 - Completed 200 OK
2025-10-13 10:17:42 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:42 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:42 - Resource not found
2025-10-13 10:17:42 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:42 - Completed 404 NOT_FOUND
2025-10-13 10:17:42 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:42 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:42 - Writing [{timestamp=Mon Oct 13 10:17:42 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:42 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:46 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:46 - Resource not found
2025-10-13 10:17:46 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:46 - Completed 404 NOT_FOUND
2025-10-13 10:17:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:46 - Writing [{timestamp=Mon Oct 13 10:17:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:46 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:46 - Resource not found
2025-10-13 10:17:46 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:46 - Completed 404 NOT_FOUND
2025-10-13 10:17:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:46 - Writing [{timestamp=Mon Oct 13 10:17:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:49 - GET "/login", parameters={}
2025-10-13 10:17:49 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 10:17:49 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:17:49 - Completed 200 OK
2025-10-13 10:17:49 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:49 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:49 - Resource not found
2025-10-13 10:17:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:49 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:49 - Completed 404 NOT_FOUND
2025-10-13 10:17:49 - GET "/css/login-home.css", parameters={}
2025-10-13 10:17:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:49 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:49 - Completed 200 OK
2025-10-13 10:17:49 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:49 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:49 - Writing [{timestamp=Mon Oct 13 10:17:49 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:49 - Completed 200 OK
2025-10-13 10:17:49 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:51 - GET "/home", parameters={}
2025-10-13 10:17:51 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:17:51 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:17:51 - [THYMELEAF][http-nio-8080-exec-7][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - GET "/css/styles.css", parameters={}
2025-10-13 10:17:51 - Resource not found
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:17:51 - Completed 404 NOT_FOUND
2025-10-13 10:17:51 - GET "/css/header.css", parameters={}
2025-10-13 10:17:51 - GET "/css/login-home.css", parameters={}
2025-10-13 10:17:51 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:17:51 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:17:51 - Writing [{timestamp=Mon Oct 13 10:17:51 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:17:51 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:17:51 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:17:51 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:17:51 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:17:51 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:17:51 - Completed 200 OK
2025-10-13 10:18:07 - GET "/manage-gateways", parameters={}
2025-10-13 10:18:07 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 10:18:07 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:18:07 - [THYMELEAF][http-nio-8080-exec-8][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:18:07 - GET "/css/header.css", parameters={}
2025-10-13 10:18:07 - GET "/css/styles.css", parameters={}
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - GET "/css/manageGateways.css", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:18:07 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - Resource not found
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:18:07 - Completed 404 NOT_FOUND
2025-10-13 10:18:07 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:18:07 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:18:07 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:18:07 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 10:18:07 - Writing [{timestamp=Mon Oct 13 10:18:07 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - Completed 200 OK
2025-10-13 10:18:07 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:18:07 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:07 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:08 - Completed 200 OK
2025-10-13 10:18:08 - Completed 200 OK
2025-10-13 10:18:08 - Completed 200 OK
2025-10-13 10:18:08 - Completed 200 OK
2025-10-13 10:18:20 - GET "/manage-gateways/monitoring/leva-rpi-mantu/view?ip=10.243.128.3", parameters={masked}
2025-10-13 10:18:20 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:18:20 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Resource not found
2025-10-13 10:18:20 - GET "/css/styles.css", parameters={}
2025-10-13 10:18:20 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Completed 404 NOT_FOUND
2025-10-13 10:18:20 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:18:20 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:18:20 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:18:20 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:18:20 - Writing [{timestamp=Mon Oct 13 10:18:20 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:18:20 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:18:20 - GET "/css/header.css", parameters={}
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:18:20 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:18:20 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:18:20 - Completed 200 OK
2025-10-13 10:18:20 - GET "/manage-gateways/monitoring/leva-rpi-mantu/stream?ip=10.243.128.3&t=1760343500753", parameters={masked}
2025-10-13 10:18:20 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:18:20 - [a79e1bd] HTTP GET http://monitoring:8081/api/monitoring/gateway/leva-rpi-mantu?ip=10.243.128.3&threadId=leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343500910
2025-10-13 10:18:20 - Started async request for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:18:20 - Exiting but response remains open for further handling
2025-10-13 10:18:20 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:18:20 - Async result set for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:18:20 - Performing async dispatch for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:18:20 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/leva-rpi-mantu/stream?ip=10.243.128.3&t=1760343500753", parameters={masked}
2025-10-13 10:18:21 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:18:21 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:18:21 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:18:21 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:18:21 - "ERROR" dispatch for GET "/error?ip=10.243.128.3&t=1760343500753", parameters={masked}
2025-10-13 10:18:21 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:18:21 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:18:21 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:18:21 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:18:21 - Nothing to write: null body
2025-10-13 10:18:21 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:18:21 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:18:21 - Servlet container error notification for "/error"
2025-10-13 10:18:21 - [6cacbd05] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu?threadId=leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343500910
2025-10-13 10:18:21 - Erreur lors de l'arrêt du monitoring pour gateway leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343500910
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:18:21 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:18:45 - GET "/users/user5", parameters={}
2025-10-13 10:18:45 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 10:18:45 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:18:45 - [THYMELEAF][http-nio-8080-exec-2][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:18:45 - GET "/css/styles.css", parameters={}
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:45 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:18:45 - Resource not found
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - GET "/css/profile.css", parameters={}
2025-10-13 10:18:45 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:18:45 - Completed 404 NOT_FOUND
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:45 - GET "/css/header.css", parameters={}
2025-10-13 10:18:45 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:45 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:18:45 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:18:45 - Writing [{timestamp=Mon Oct 13 10:18:45 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:18:45 - GET "/uploads/20251010_103704_chevre.png", parameters={}
2025-10-13 10:18:45 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:18:45 - Completed 200 OK
2025-10-13 10:19:12 - POST "/users/user5/update-avatar", parameters={multipart}
2025-10-13 10:19:12 - Mapped to com.amaris.sensorprocessor.controller.UserController#updateAvatar(String, MultipartFile)
2025-10-13 10:19:12 - View name [redirect:], model {}
2025-10-13 10:19:12 - Completed 302 FOUND
2025-10-13 10:19:12 - GET "/users/user5", parameters={}
2025-10-13 10:19:12 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 10:19:12 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:19:12 - [THYMELEAF][http-nio-8080-exec-8][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:19:12 - Completed 200 OK
2025-10-13 10:19:13 - GET "/css/styles.css", parameters={}
2025-10-13 10:19:13 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:13 - GET "/css/profile.css", parameters={}
2025-10-13 10:19:13 - GET "/css/header.css", parameters={}
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:13 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:13 - Resource not found
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:19:13 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:19:13 - Completed 404 NOT_FOUND
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:13 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:13 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:19:13 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:13 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 10:19:13 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:19:13 - Writing [{timestamp=Mon Oct 13 10:19:13 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:19:13 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:19:13 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:13 - Completed 200 OK
2025-10-13 10:19:26 - GET "/users/user5", parameters={}
2025-10-13 10:19:26 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 10:19:26 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:19:26 - [THYMELEAF][http-nio-8080-exec-9][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:19:26 - Completed 200 OK
2025-10-13 10:19:26 - GET "/css/header.css", parameters={}
2025-10-13 10:19:26 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:19:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:26 - GET "/css/profile.css", parameters={}
2025-10-13 10:19:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:26 - GET "/css/styles.css", parameters={}
2025-10-13 10:19:26 - Resource not found
2025-10-13 10:19:26 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:19:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:26 - Completed 404 NOT_FOUND
2025-10-13 10:19:26 - Completed 200 OK
2025-10-13 10:19:26 - Completed 200 OK
2025-10-13 10:19:26 - Completed 200 OK
2025-10-13 10:19:26 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:19:26 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:19:26 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:19:26 - Writing [{timestamp=Mon Oct 13 10:19:26 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:19:26 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:19:28 - GET "/manage-gateways/monitoring/leva-rpi-mantu/view?ip=10.243.128.3", parameters={masked}
2025-10-13 10:19:28 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 10:19:28 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 10:19:29 - GET "/css/styles.css", parameters={}
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - GET "/css/header.css", parameters={}
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - GET "/image/thermostat.svg", parameters={}
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 10:19:29 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - Resource not found
2025-10-13 10:19:29 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:19:29 - Completed 404 NOT_FOUND
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:29 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:19:29 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:19:29 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:19:29 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - Writing [{timestamp=Mon Oct 13 10:19:29 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:19:29 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:19:29 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 10:19:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:29 - Completed 200 OK
2025-10-13 10:19:30 - Completed 200 OK
2025-10-13 10:19:30 - GET "/manage-gateways/monitoring/leva-rpi-mantu/stream?ip=10.243.128.3&t=1760343570846", parameters={masked}
2025-10-13 10:19:30 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 10:19:31 - [303a415e] HTTP GET http://monitoring:8081/api/monitoring/gateway/leva-rpi-mantu?ip=10.243.128.3&threadId=leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343570930
2025-10-13 10:19:31 - Started async request for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:19:31 - Exiting but response remains open for further handling
2025-10-13 10:19:31 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:19:31 - Async result set for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:19:31 - Performing async dispatch for "/manage-gateways/monitoring/leva-rpi-mantu/stream"
2025-10-13 10:19:31 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/leva-rpi-mantu/stream?ip=10.243.128.3&t=1760343570846", parameters={masked}
2025-10-13 10:19:31 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 10:19:31 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 10:19:31 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:19:31 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:19:31 - "ERROR" dispatch for GET "/error?ip=10.243.128.3&t=1760343570846", parameters={masked}
2025-10-13 10:19:31 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:19:31 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 10:19:31 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 10:19:31 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 10:19:31 - Nothing to write: null body
2025-10-13 10:19:31 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 10:19:31 - Exiting from "ERROR" dispatch, status 500
2025-10-13 10:19:31 - Servlet container error notification for "/error"
2025-10-13 10:19:31 - [10af2d66] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu?threadId=leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343570930
2025-10-13 10:19:31 - Erreur lors de l'arrêt du monitoring pour gateway leva-rpi-mantu-D5624501C2733C9FF0E6D669B277A3DE-1760343570930
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:19:31 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/leva-rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 10:19:33 - GET "/home", parameters={}
2025-10-13 10:19:33 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 10:19:33 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:19:33 - [THYMELEAF][http-nio-8080-exec-10][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - GET "/css/login-home.css", parameters={}
2025-10-13 10:19:34 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:19:34 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 10:19:34 - GET "/css/styles.css", parameters={}
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 10:19:34 - GET "/css/header.css", parameters={}
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - Resource not found
2025-10-13 10:19:34 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 10:19:34 - Completed 404 NOT_FOUND
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:19:34 - GET "/image/config-icon.svg", parameters={}
2025-10-13 10:19:34 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:19:34 - GET "/image/alerte.svg", parameters={}
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - GET "/image/predictive.svg", parameters={}
2025-10-13 10:19:34 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:19:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - GET "/image/user-icon.svg", parameters={}
2025-10-13 10:19:34 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:34 - Completed 200 OK
2025-10-13 10:19:34 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 10:19:35 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:19:35 - Writing [{timestamp=Mon Oct 13 10:19:35 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:19:35 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:36 - Completed 200 OK
2025-10-13 10:19:36 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:19:36 - Completed 200 OK
2025-10-13 10:19:36 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:19:36 - Completed 200 OK
2025-10-13 10:19:36 - Completed 200 OK
2025-10-13 10:19:36 - Completed 200 OK
2025-10-13 10:20:10 - GET "/manage-users", parameters={}
2025-10-13 10:20:10 - Mapped to com.amaris.sensorprocessor.controller.UserController#manageUsers(Model, Principal)
2025-10-13 10:20:11 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:20:11 - [THYMELEAF][http-nio-8080-exec-5][manageUsers] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template manageUsers, line 13, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:20:11 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - GET "/css/styles.css", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - GET "/css/header.css", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - GET "/css/manageUsers.css", parameters={}
2025-10-13 10:20:11 - Resource not found
2025-10-13 10:20:11 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:11 - Completed 404 NOT_FOUND
2025-10-13 10:20:11 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:11 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:20:11 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:11 - Writing [{timestamp=Mon Oct 13 10:20:11 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:20:11 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - GET "/javascript/manageUsers.js", parameters={}
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:20:11 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:20:11 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:11 - Completed 200 OK
2025-10-13 10:20:14 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:14 - Resource not found
2025-10-13 10:20:14 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:14 - Completed 404 NOT_FOUND
2025-10-13 10:20:14 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:14 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:14 - GET "/css/header.css", parameters={}
2025-10-13 10:20:14 - GET "/css/login-home.css", parameters={}
2025-10-13 10:20:14 - GET "/css/styles.css", parameters={}
2025-10-13 10:20:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:14 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:14 - Writing [{timestamp=Mon Oct 13 10:20:14 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:14 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:14 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:20:14 - Completed 200 OK
2025-10-13 10:20:14 - Completed 200 OK
2025-10-13 10:20:14 - Completed 200 OK
2025-10-13 10:20:15 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:15 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:15 - Resource not found
2025-10-13 10:20:15 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:15 - Completed 404 NOT_FOUND
2025-10-13 10:20:15 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:15 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:15 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:15 - Writing [{timestamp=Mon Oct 13 10:20:15 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:15 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:20:16 - GET "/manage-sensors", parameters={}
2025-10-13 10:20:16 - Mapped to com.amaris.sensorprocessor.controller.SensorController#manageSensors(Model, Principal)
2025-10-13 10:20:16 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 10:20:16 - [THYMELEAF][http-nio-8080-exec-10][manageSensors] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Sensors', homeUrl=@{/})" found in template manageSensors, line 15, col 10. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Sensors', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 10:20:16 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - GET "/css/styles.css", parameters={}
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - Resource not found
2025-10-13 10:20:16 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:16 - Completed 404 NOT_FOUND
2025-10-13 10:20:16 - GET "/css/manageSensors.css", parameters={}
2025-10-13 10:20:16 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 10:20:16 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - GET "/css/header.css", parameters={}
2025-10-13 10:20:16 - Completed 200 OK
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:16 - Writing [{timestamp=Mon Oct 13 10:20:16 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:16 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:20:16 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 10:20:16 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 10:20:16 - Completed 200 OK
2025-10-13 10:20:16 - Completed 200 OK
2025-10-13 10:20:16 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:16 - Completed 200 OK
2025-10-13 10:20:16 - Completed 200 OK
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - GET "/image/search-icon.svg", parameters={}
2025-10-13 10:20:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - GET "/javascript/manageSensors.js", parameters={}
2025-10-13 10:20:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 10:20:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:17 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 10:20:17 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 10:20:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:17 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:17 - Completed 200 OK
2025-10-13 10:20:19 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:19 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:19 - Resource not found
2025-10-13 10:20:19 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:19 - Completed 404 NOT_FOUND
2025-10-13 10:20:19 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:19 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:19 - Writing [{timestamp=Mon Oct 13 10:20:19 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:19 - Exiting from "ERROR" dispatch, status 404
2025-10-13 10:20:20 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 10:20:20 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 10:20:20 - Resource not found
2025-10-13 10:20:20 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 10:20:20 - Completed 404 NOT_FOUND
2025-10-13 10:20:20 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 10:20:20 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 10:20:20 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 10:20:20 - Writing [{timestamp=Mon Oct 13 10:20:20 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 10:20:20 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:02:29 - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=34m51s148ms497µs600ns).
2025-10-13 11:02:41 - GET "/login", parameters={}
2025-10-13 11:02:41 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:02:41 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - GET "/css/styles.css", parameters={}
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - GET "/css/login-home.css", parameters={}
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - GET "/login", parameters={}
2025-10-13 11:02:41 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:02:41 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:02:41 - Selected '*/*' given [*/*]
2025-10-13 11:02:41 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:41 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:02:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:41 - Completed 200 OK
2025-10-13 11:02:43 - GET "/home", parameters={}
2025-10-13 11:02:43 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:02:43 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:02:43 - [THYMELEAF][http-nio-8080-exec-1][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:02:43 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:02:43 - GET "/css/login-home.css", parameters={}
2025-10-13 11:02:43 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - GET "/css/header.css", parameters={}
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - GET "/css/styles.css", parameters={}
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Resource not found
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:02:43 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 11:02:43 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:02:43 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:02:43 - Completed 404 NOT_FOUND
2025-10-13 11:02:43 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:02:43 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:02:43 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:43 - Completed 200 OK
2025-10-13 11:02:43 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:02:43 - Writing [{timestamp=Mon Oct 13 11:02:43 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:02:43 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:02:45 - GET "/users/user5", parameters={}
2025-10-13 11:02:45 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:02:45 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:02:45 - [THYMELEAF][http-nio-8080-exec-4][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:02:45 - Completed 200 OK
2025-10-13 11:02:45 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:02:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:45 - Resource not found
2025-10-13 11:02:45 - GET "/css/styles.css", parameters={}
2025-10-13 11:02:45 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:02:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:45 - Completed 404 NOT_FOUND
2025-10-13 11:02:45 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 11:02:45 - GET "/css/profile.css", parameters={}
2025-10-13 11:02:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:45 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:02:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:02:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:02:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:02:46 - Writing [{timestamp=Mon Oct 13 11:02:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:02:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:02:45 - GET "/css/header.css", parameters={}
2025-10-13 11:02:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:02:46 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:02:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:02:46 - GET "/uploads/20251013_101912_user-profile.png", parameters={}
2025-10-13 11:02:46 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:02:46 - Completed 200 OK
2025-10-13 11:03:08 - POST "/users/user5/update-avatar", parameters={multipart}
2025-10-13 11:03:08 - Mapped to com.amaris.sensorprocessor.controller.UserController#updateAvatar(String, MultipartFile)
2025-10-13 11:03:08 - View name [redirect:], model {}
2025-10-13 11:03:08 - Completed 302 FOUND
2025-10-13 11:03:08 - GET "/users/user5", parameters={}
2025-10-13 11:03:08 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:03:08 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:08 - [THYMELEAF][http-nio-8080-exec-8][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:08 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:08 - Resource not found
2025-10-13 11:03:08 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:08 - Completed 404 NOT_FOUND
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:08 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:08 - GET "/css/header.css", parameters={}
2025-10-13 11:03:08 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:08 - Writing [{timestamp=Mon Oct 13 11:03:08 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:08 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:08 - GET "/css/profile.css", parameters={}
2025-10-13 11:03:08 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:08 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:08 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:08 - Completed 200 OK
2025-10-13 11:03:09 - GET "/users/user5", parameters={}
2025-10-13 11:03:09 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:03:09 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:09 - [THYMELEAF][http-nio-8080-exec-9][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:09 - Completed 200 OK
2025-10-13 11:03:09 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:09 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:09 - Resource not found
2025-10-13 11:03:09 - Completed 200 OK
2025-10-13 11:03:09 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:09 - Completed 404 NOT_FOUND
2025-10-13 11:03:09 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:09 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:09 - GET "/css/profile.css", parameters={}
2025-10-13 11:03:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:09 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:09 - GET "/css/header.css", parameters={}
2025-10-13 11:03:09 - Writing [{timestamp=Mon Oct 13 11:03:09 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:09 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:09 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:09 - Completed 200 OK
2025-10-13 11:03:09 - Completed 200 OK
2025-10-13 11:03:10 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:10 - Resource not found
2025-10-13 11:03:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:10 - Completed 404 NOT_FOUND
2025-10-13 11:03:10 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:10 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:10 - Writing [{timestamp=Mon Oct 13 11:03:10 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:10 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:10 - GET "/css/header.css", parameters={}
2025-10-13 11:03:10 - GET "/css/login-home.css", parameters={}
2025-10-13 11:03:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:10 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:10 - Completed 200 OK
2025-10-13 11:03:10 - Completed 200 OK
2025-10-13 11:03:10 - Completed 200 OK
2025-10-13 11:03:10 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:10 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:10 - Resource not found
2025-10-13 11:03:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:10 - Completed 404 NOT_FOUND
2025-10-13 11:03:10 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:10 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:10 - Writing [{timestamp=Mon Oct 13 11:03:10 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:10 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:24 - GET "/users/user5", parameters={}
2025-10-13 11:03:24 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:03:24 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:24 - [THYMELEAF][http-nio-8080-exec-3][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:30 - Completed 200 OK
2025-10-13 11:03:30 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:30 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:30 - GET "/css/header.css", parameters={}
2025-10-13 11:03:30 - Completed 200 OK
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:30 - GET "/css/profile.css", parameters={}
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:30 - Resource not found
2025-10-13 11:03:30 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:30 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:30 - Completed 404 NOT_FOUND
2025-10-13 11:03:30 - Completed 200 OK
2025-10-13 11:03:30 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:30 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:30 - Completed 200 OK
2025-10-13 11:03:30 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:30 - Writing [{timestamp=Mon Oct 13 11:03:30 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:30 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:03:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:30 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:30 - Completed 200 OK
2025-10-13 11:03:31 - Completed 200 OK
2025-10-13 11:03:35 - GET "/users/user5", parameters={}
2025-10-13 11:03:38 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:03:38 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:38 - [THYMELEAF][http-nio-8080-exec-7][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:38 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:38 - Resource not found
2025-10-13 11:03:38 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:38 - Completed 404 NOT_FOUND
2025-10-13 11:03:38 - Completed 200 OK
2025-10-13 11:03:38 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:38 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:38 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:38 - Writing [{timestamp=Mon Oct 13 11:03:38 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:38 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:38 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:38 - GET "/css/profile.css", parameters={}
2025-10-13 11:03:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:38 - GET "/css/header.css", parameters={}
2025-10-13 11:03:38 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:38 - Resource not found
2025-10-13 11:03:38 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:38 - Completed 200 OK
2025-10-13 11:03:38 - Completed 200 OK
2025-10-13 11:03:41 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:41 - Completed 404 NOT_FOUND
2025-10-13 11:03:41 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:42 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:42 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:42 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:03:42 - Writing [{timestamp=Mon Oct 13 11:03:42 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:42 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:42 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:42 - Completed 200 OK
2025-10-13 11:03:42 - Resource not found
2025-10-13 11:03:42 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:42 - Completed 404 NOT_FOUND
2025-10-13 11:03:42 - Completed 200 OK
2025-10-13 11:03:42 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:42 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:42 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:42 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:42 - Writing [{timestamp=Mon Oct 13 11:03:42 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:42 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:42 - Completed 200 OK
2025-10-13 11:03:43 - Completed 200 OK
2025-10-13 11:03:45 - GET "/home", parameters={}
2025-10-13 11:03:45 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:03:45 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:45 - [THYMELEAF][http-nio-8080-exec-8][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:45 - GET "/css/login-home.css", parameters={}
2025-10-13 11:03:45 - GET "/css/header.css", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:03:45 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:45 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Resource not found
2025-10-13 11:03:45 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:45 - Completed 404 NOT_FOUND
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:45 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:45 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:45 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:45 - Writing [{timestamp=Mon Oct 13 11:03:45 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:45 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:03:45 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:45 - Completed 200 OK
2025-10-13 11:03:47 - GET "/users/user5", parameters={}
2025-10-13 11:03:47 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:03:47 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:03:47 - [THYMELEAF][http-nio-8080-exec-10][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:47 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:47 - GET "/css/profile.css", parameters={}
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:47 - GET "/css/header.css", parameters={}
2025-10-13 11:03:47 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:47 - Resource not found
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:47 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:47 - Completed 404 NOT_FOUND
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:47 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:47 - Writing [{timestamp=Mon Oct 13 11:03:47 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:47 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:47 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:03:47 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:47 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:47 - Completed 200 OK
2025-10-13 11:03:49 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:49 - Resource not found
2025-10-13 11:03:49 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:49 - Completed 404 NOT_FOUND
2025-10-13 11:03:49 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:49 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:49 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:49 - Writing [{timestamp=Mon Oct 13 11:03:49 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:49 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:03:49 - GET "/css/styles.css", parameters={}
2025-10-13 11:03:49 - GET "/css/login-home.css", parameters={}
2025-10-13 11:03:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:49 - GET "/css/header.css", parameters={}
2025-10-13 11:03:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:49 - Completed 200 OK
2025-10-13 11:03:49 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:03:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:03:49 - Completed 200 OK
2025-10-13 11:03:49 - Completed 200 OK
2025-10-13 11:03:49 - Resource not found
2025-10-13 11:03:49 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:03:49 - Completed 404 NOT_FOUND
2025-10-13 11:03:49 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:03:49 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:03:49 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:03:49 - Writing [{timestamp=Mon Oct 13 11:03:49 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:03:49 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:06:13 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:06:13 - Graceful shutdown complete
2025-10-13 11:06:16 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:06:16 - HikariPool-1 - Shutdown completed.
2025-10-13 11:06:22 - Starting SensorprocessorApplication using Java 17.0.12 with PID 20580 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:06:22 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:06:25 - Tomcat initialized with port 8080 (http)
2025-10-13 11:06:25 - Starting service [Tomcat]
2025-10-13 11:06:25 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:06:25 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:06:25 - Root WebApplicationContext: initialization completed in 3100 ms
2025-10-13 11:06:25 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:06:25 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:06:26 - HikariPool-1 - Starting...
2025-10-13 11:06:26 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@6568f998
2025-10-13 11:06:26 - HikariPool-1 - Start completed.
2025-10-13 11:06:27 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:06:27 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:06:27 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:06:28 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:06:28 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:06:28 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:06:28 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:06:28 - Started SensorprocessorApplication in 7.329 seconds (process running for 8.273)
2025-10-13 11:06:38 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:06:38 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:06:38 - Detected StandardServletMultipartResolver
2025-10-13 11:06:38 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:06:38 - Detected FixedThemeResolver
2025-10-13 11:06:38 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@58894a1c
2025-10-13 11:06:38 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@51c07928
2025-10-13 11:06:38 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:06:38 - Completed initialization in 6 ms
2025-10-13 11:06:38 - GET "/login", parameters={}
2025-10-13 11:06:38 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:06:38 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:06:38 - Completed 200 OK
2025-10-13 11:06:38 - GET "/css/styles.css", parameters={}
2025-10-13 11:06:38 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - GET "/css/login-home.css", parameters={}
2025-10-13 11:06:39 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:06:39 - GET "/login", parameters={}
2025-10-13 11:06:39 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:06:39 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:06:39 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - Selected '*/*' given [*/*]
2025-10-13 11:06:39 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:39 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:06:39 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:39 - Completed 200 OK
2025-10-13 11:06:40 - GET "/home", parameters={}
2025-10-13 11:06:40 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:06:41 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:06:41 - [THYMELEAF][http-nio-8080-exec-1][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - GET "/css/header.css", parameters={}
2025-10-13 11:06:41 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:06:41 - GET "/css/styles.css", parameters={}
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:06:41 - GET "/css/login-home.css", parameters={}
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Resource not found
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:06:41 - Completed 404 NOT_FOUND
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:06:41 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:06:41 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:06:41 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:06:41 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:41 - Completed 200 OK
2025-10-13 11:06:42 - Completed 200 OK
2025-10-13 11:06:42 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:06:42 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:42 - Completed 200 OK
2025-10-13 11:06:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:06:42 - Writing [{timestamp=Mon Oct 13 11:06:41 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:06:42 - Completed 200 OK
2025-10-13 11:06:42 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:06:44 - GET "/manage-gateways", parameters={}
2025-10-13 11:06:44 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 11:06:44 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:06:44 - [THYMELEAF][http-nio-8080-exec-3][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:06:44 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Resource not found
2025-10-13 11:06:44 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:06:44 - Completed 404 NOT_FOUND
2025-10-13 11:06:44 - GET "/css/styles.css", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:06:44 - GET "/css/manageGateways.css", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:06:44 - GET "/css/header.css", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:06:44 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:06:44 - Writing [{timestamp=Mon Oct 13 11:06:44 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - GET "/image/search-icon.svg", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 11:06:44 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 11:06:44 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:44 - Completed 200 OK
2025-10-13 11:06:46 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:06:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:46 - Resource not found
2025-10-13 11:06:46 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:06:46 - Completed 404 NOT_FOUND
2025-10-13 11:06:46 - GET "/css/styles.css", parameters={}
2025-10-13 11:06:46 - GET "/css/login-home.css", parameters={}
2025-10-13 11:06:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:06:46 - GET "/css/header.css", parameters={}
2025-10-13 11:06:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:06:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:06:46 - Writing [{timestamp=Mon Oct 13 11:06:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:06:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:06:46 - Completed 200 OK
2025-10-13 11:06:46 - Completed 200 OK
2025-10-13 11:06:46 - Completed 200 OK
2025-10-13 11:06:46 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:06:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:06:46 - Resource not found
2025-10-13 11:06:46 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:06:46 - Completed 404 NOT_FOUND
2025-10-13 11:06:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:06:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:06:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:06:46 - Writing [{timestamp=Mon Oct 13 11:06:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:06:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:07:04 - GET "/users/user5", parameters={}
2025-10-13 11:07:04 - Mapped to com.amaris.sensorprocessor.controller.UserController#viewUserProfile(String, Model, Authentication)
2025-10-13 11:07:04 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:07:04 - [THYMELEAF][http-nio-8080-exec-7][profile] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})" found in template profile, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='My profile', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:04 - GET "/css/styles.css", parameters={}
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:04 - GET "/css/header.css", parameters={}
2025-10-13 11:07:04 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:07:04 - GET "/css/profile.css", parameters={}
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - Resource not found
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:04 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:07:04 - Completed 404 NOT_FOUND
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:07:04 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:07:04 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:07:04 - Writing [{timestamp=Mon Oct 13 11:07:04 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:07:04 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:04 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:07:04 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:07:04 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:04 - Completed 200 OK
2025-10-13 11:07:06 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:07:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:06 - Resource not found
2025-10-13 11:07:06 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:07:06 - Completed 404 NOT_FOUND
2025-10-13 11:07:06 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:07:06 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:07:06 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:07:06 - Writing [{timestamp=Mon Oct 13 11:07:06 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:07:06 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:07:06 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:07:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:07:06 - Resource not found
2025-10-13 11:07:06 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:07:06 - Completed 404 NOT_FOUND
2025-10-13 11:07:06 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:07:06 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:07:06 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:07:06 - Writing [{timestamp=Mon Oct 13 11:07:06 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:07:06 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:08:52 - GET "/home", parameters={}
2025-10-13 11:08:52 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:08:52 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:08:52 - [THYMELEAF][http-nio-8080-exec-1][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:08:52 - Completed 200 OK
2025-10-13 11:08:53 - GET "/css/styles.css", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - GET "/css/header.css", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:08:53 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:08:53 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - GET "/css/login-home.css", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:08:53 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:08:53 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:08:53 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:08:53 - Completed 200 OK
2025-10-13 11:08:53 - Resource not found
2025-10-13 11:08:53 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:08:53 - Completed 404 NOT_FOUND
2025-10-13 11:08:53 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:08:53 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:08:53 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:08:53 - Writing [{timestamp=Mon Oct 13 11:08:53 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:08:53 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:08:56 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:08:56 - Graceful shutdown complete
2025-10-13 11:08:58 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:08:58 - HikariPool-1 - Shutdown completed.
2025-10-13 11:09:02 - Starting SensorprocessorApplication using Java 17.0.12 with PID 16192 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:09:02 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:09:05 - Tomcat initialized with port 8080 (http)
2025-10-13 11:09:05 - Starting service [Tomcat]
2025-10-13 11:09:05 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:09:05 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:09:05 - Root WebApplicationContext: initialization completed in 2649 ms
2025-10-13 11:09:05 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:09:05 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:09:06 - HikariPool-1 - Starting...
2025-10-13 11:09:06 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@45d4421d
2025-10-13 11:09:06 - HikariPool-1 - Start completed.
2025-10-13 11:09:07 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:09:07 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:09:07 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:09:07 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:09:07 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:09:07 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:09:08 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:09:08 - Started SensorprocessorApplication in 6.163 seconds (process running for 6.819)
2025-10-13 11:10:22 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:10:22 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:10:22 - Detected StandardServletMultipartResolver
2025-10-13 11:10:22 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:10:22 - Detected FixedThemeResolver
2025-10-13 11:10:22 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@4fb282aa
2025-10-13 11:10:22 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@7c7bb393
2025-10-13 11:10:22 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:10:22 - Completed initialization in 4 ms
2025-10-13 11:10:22 - GET "/login", parameters={}
2025-10-13 11:10:22 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:10:22 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - GET "/css/styles.css", parameters={}
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - GET "/css/login-home.css", parameters={}
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:10:22 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:10:22 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - GET "/login", parameters={}
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:10:22 - Selected '*/*' given [*/*]
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:22 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:10:22 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:22 - Completed 200 OK
2025-10-13 11:10:23 - GET "/home", parameters={}
2025-10-13 11:10:23 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:10:23 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:10:23 - [THYMELEAF][http-nio-8080-exec-5][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Resource not found
2025-10-13 11:10:23 - GET "/css/styles.css", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:10:23 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:10:23 - GET "/css/login-home.css", parameters={}
2025-10-13 11:10:23 - Completed 404 NOT_FOUND
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - GET "/css/header.css", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:10:23 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:23 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:10:23 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:23 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:10:23 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:10:23 - Completed 200 OK
2025-10-13 11:10:24 - Completed 200 OK
2025-10-13 11:10:24 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:10:24 - Writing [{timestamp=Mon Oct 13 11:10:23 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:10:24 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:10:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:10:24 - Completed 200 OK
2025-10-13 11:10:24 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:15:29 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:15:29 - Graceful shutdown complete
2025-10-13 11:15:31 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:15:31 - HikariPool-1 - Shutdown completed.
2025-10-13 11:15:35 - Starting SensorprocessorApplication using Java 17.0.12 with PID 12900 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:15:35 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:15:37 - Tomcat initialized with port 8080 (http)
2025-10-13 11:15:37 - Starting service [Tomcat]
2025-10-13 11:15:37 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:15:37 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:15:37 - Root WebApplicationContext: initialization completed in 2569 ms
2025-10-13 11:15:37 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:15:37 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:15:38 - HikariPool-1 - Starting...
2025-10-13 11:15:38 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@21002393
2025-10-13 11:15:38 - HikariPool-1 - Start completed.
2025-10-13 11:15:39 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:15:39 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:15:39 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:15:39 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:15:39 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:15:40 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:15:40 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:15:40 - Started SensorprocessorApplication in 6.229 seconds (process running for 6.854)
2025-10-13 11:15:53 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:15:53 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:15:53 - Detected StandardServletMultipartResolver
2025-10-13 11:15:53 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:15:53 - Detected FixedThemeResolver
2025-10-13 11:15:53 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@4fb282aa
2025-10-13 11:15:53 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@7c7bb393
2025-10-13 11:15:53 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:15:53 - Completed initialization in 3 ms
2025-10-13 11:15:54 - GET "/login", parameters={}
2025-10-13 11:15:54 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:15:54 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - GET "/css/styles.css", parameters={}
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:15:54 - GET "/css/login-home.css", parameters={}
2025-10-13 11:15:54 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - GET "/login", parameters={}
2025-10-13 11:15:54 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - Selected '*/*' given [*/*]
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:54 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:15:54 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:54 - Completed 200 OK
2025-10-13 11:15:55 - GET "/home", parameters={}
2025-10-13 11:15:55 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:15:55 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:15:55 - [THYMELEAF][http-nio-8080-exec-2][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - GET "/css/styles.css", parameters={}
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - GET "/css/login-home.css", parameters={}
2025-10-13 11:15:55 - GET "/css/header.css", parameters={}
2025-10-13 11:15:55 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:15:55 - Resource not found
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:15:55 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:15:55 - Completed 404 NOT_FOUND
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:15:55 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:15:55 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:15:55 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:15:55 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Completed 200 OK
2025-10-13 11:15:55 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:15:55 - Writing [{timestamp=Mon Oct 13 11:15:55 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:15:56 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:16:06 - GET "/manage-gateways", parameters={}
2025-10-13 11:16:06 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 11:16:06 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:16:06 - [THYMELEAF][http-nio-8080-exec-1][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:16:06 - GET "/css/styles.css", parameters={}
2025-10-13 11:16:06 - GET "/css/header.css", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:16:06 - GET "/css/manageGateways.css", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - Resource not found
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:16:06 - Completed 404 NOT_FOUND
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:16:06 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:16:06 - Writing [{timestamp=Mon Oct 13 11:16:06 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - GET "/image/search-icon.svg", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 11:16:06 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:06 - Completed 200 OK
2025-10-13 11:16:25 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 11:16:25 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 11:16:25 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - GET "/css/styles.css", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Resource not found
2025-10-13 11:16:25 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:16:25 - Completed 404 NOT_FOUND
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - GET "/css/header.css", parameters={}
2025-10-13 11:16:25 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 11:16:25 - GET "/image/thermostat.svg", parameters={}
2025-10-13 11:16:25 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:16:25 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - Writing [{timestamp=Mon Oct 13 11:16:25 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:16:25 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:16:25 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - Completed 200 OK
2025-10-13 11:16:25 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760346985286", parameters={masked}
2025-10-13 11:16:25 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 11:16:25 - [66db3a25] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-B68D17A9DFF15CD82C97DD969B99FF70-1760346985371
2025-10-13 11:16:25 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:16:25 - Exiting but response remains open for further handling
2025-10-13 11:16:26 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:16:26 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:16:26 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:16:26 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760346985286", parameters={masked}
2025-10-13 11:16:26 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 11:16:26 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 11:16:26 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:16:26 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:16:26 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760346985286", parameters={masked}
2025-10-13 11:16:26 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:16:26 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 11:16:26 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 11:16:26 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 11:16:26 - Nothing to write: null body
2025-10-13 11:16:26 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 11:16:26 - Exiting from "ERROR" dispatch, status 500
2025-10-13 11:16:26 - Servlet container error notification for "/error"
2025-10-13 11:16:26 - [5c2899cd] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-B68D17A9DFF15CD82C97DD969B99FF70-1760346985371
2025-10-13 11:16:26 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-B68D17A9DFF15CD82C97DD969B99FF70-1760346985371
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:16:26 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:18:08 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:18:08 - Graceful shutdown complete
2025-10-13 11:18:10 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:18:10 - HikariPool-1 - Shutdown completed.
2025-10-13 11:18:17 - Starting SensorprocessorApplication using Java 17.0.12 with PID 7700 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:18:17 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:18:20 - Tomcat initialized with port 8080 (http)
2025-10-13 11:18:20 - Starting service [Tomcat]
2025-10-13 11:18:20 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:18:20 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:18:20 - Root WebApplicationContext: initialization completed in 2842 ms
2025-10-13 11:18:20 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:18:20 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:18:21 - HikariPool-1 - Starting...
2025-10-13 11:18:21 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@21002393
2025-10-13 11:18:21 - HikariPool-1 - Start completed.
2025-10-13 11:18:22 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:18:23 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:18:23 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:18:23 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:18:23 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:18:23 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:18:24 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:18:24 - Started SensorprocessorApplication in 7.358 seconds (process running for 7.906)
2025-10-13 11:18:24 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:18:24 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:18:24 - Detected StandardServletMultipartResolver
2025-10-13 11:18:24 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:18:24 - Detected FixedThemeResolver
2025-10-13 11:18:24 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@24c08841
2025-10-13 11:18:24 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@27e5bb7a
2025-10-13 11:18:24 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:18:24 - Completed initialization in 3 ms
2025-10-13 11:18:24 - GET "/login", parameters={}
2025-10-13 11:18:24 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:18:24 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:18:24 - GET "/css/login-home.css", parameters={}
2025-10-13 11:18:24 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:18:24 - GET "/css/styles.css", parameters={}
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - GET "/login", parameters={}
2025-10-13 11:18:24 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:18:24 - Selected '*/*' given [*/*]
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:24 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:18:24 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:24 - Completed 200 OK
2025-10-13 11:18:26 - GET "/home", parameters={}
2025-10-13 11:18:26 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:18:26 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:18:26 - [THYMELEAF][http-nio-8080-exec-6][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Resource not found
2025-10-13 11:18:26 - GET "/css/styles.css", parameters={}
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - GET "/css/header.css", parameters={}
2025-10-13 11:18:26 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:18:26 - GET "/css/login-home.css", parameters={}
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:18:26 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Completed 404 NOT_FOUND
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:18:26 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:18:26 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:18:26 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:26 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:18:26 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Completed 200 OK
2025-10-13 11:18:26 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:18:26 - Writing [{timestamp=Mon Oct 13 11:18:26 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:18:26 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:18:29 - GET "/manage-gateways", parameters={}
2025-10-13 11:18:29 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 11:18:29 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:18:29 - [THYMELEAF][http-nio-8080-exec-1][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:18:29 - GET "/css/manageGateways.css", parameters={}
2025-10-13 11:18:29 - GET "/css/styles.css", parameters={}
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:18:29 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - GET "/css/header.css", parameters={}
2025-10-13 11:18:29 - Resource not found
2025-10-13 11:18:29 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:18:29 - Completed 404 NOT_FOUND
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:18:29 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:18:29 - Writing [{timestamp=Mon Oct 13 11:18:29 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:18:29 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:18:29 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - GET "/image/search-icon.svg", parameters={}
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 11:18:29 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:29 - Completed 200 OK
2025-10-13 11:18:30 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 11:18:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:30 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 11:18:30 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 11:18:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:30 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:30 - Completed 200 OK
2025-10-13 11:18:30 - Completed 200 OK
2025-10-13 11:18:30 - Completed 200 OK
2025-10-13 11:18:31 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 11:18:31 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 11:18:31 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 11:18:31 - GET "/css/styles.css", parameters={}
2025-10-13 11:18:31 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - GET "/image/thermostat.svg", parameters={}
2025-10-13 11:18:31 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - GET "/css/header.css", parameters={}
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Resource not found
2025-10-13 11:18:31 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:18:31 - Completed 404 NOT_FOUND
2025-10-13 11:18:31 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:18:31 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:18:31 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:18:31 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Writing [{timestamp=Mon Oct 13 11:18:31 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:18:31 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:18:31 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:18:31 - Completed 200 OK
2025-10-13 11:18:31 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760347111773", parameters={masked}
2025-10-13 11:18:31 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 11:18:32 - [7efe3034] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-18FE309EF5A73DC19F732D7853BBF09A-1760347111892
2025-10-13 11:18:32 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:18:32 - Exiting but response remains open for further handling
2025-10-13 11:18:32 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:18:32 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:18:32 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:18:32 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760347111773", parameters={masked}
2025-10-13 11:18:32 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 11:18:32 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 11:18:32 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:18:32 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:18:32 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760347111773", parameters={masked}
2025-10-13 11:18:32 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:18:32 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 11:18:32 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 11:18:32 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 11:18:32 - Nothing to write: null body
2025-10-13 11:18:32 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 11:18:32 - Exiting from "ERROR" dispatch, status 500
2025-10-13 11:18:32 - Servlet container error notification for "/error"
2025-10-13 11:18:32 - [28259f0c] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-18FE309EF5A73DC19F732D7853BBF09A-1760347111892
2025-10-13 11:18:32 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-18FE309EF5A73DC19F732D7853BBF09A-1760347111892
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:18:32 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:21 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:19:21 - Graceful shutdown complete
2025-10-13 11:19:24 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:19:24 - HikariPool-1 - Shutdown completed.
2025-10-13 11:19:27 - Starting SensorprocessorApplication using Java 17.0.12 with PID 25660 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:19:27 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:19:29 - Tomcat initialized with port 8080 (http)
2025-10-13 11:19:29 - Starting service [Tomcat]
2025-10-13 11:19:29 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:19:29 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:19:29 - Root WebApplicationContext: initialization completed in 1950 ms
2025-10-13 11:19:29 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:19:29 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:19:29 - HikariPool-1 - Starting...
2025-10-13 11:19:29 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@35d7386b
2025-10-13 11:19:29 - HikariPool-1 - Start completed.
2025-10-13 11:19:30 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:19:31 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:19:31 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:19:31 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:19:31 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:19:31 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:19:31 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:19:31 - Started SensorprocessorApplication in 5.19 seconds (process running for 5.584)
2025-10-13 11:19:44 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:19:44 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:19:44 - Detected StandardServletMultipartResolver
2025-10-13 11:19:44 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:19:44 - Detected FixedThemeResolver
2025-10-13 11:19:44 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@6344cd6b
2025-10-13 11:19:44 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@7fc83848
2025-10-13 11:19:44 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:19:44 - Completed initialization in 8 ms
2025-10-13 11:19:44 - GET "/login", parameters={}
2025-10-13 11:19:44 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:19:44 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - GET "/css/styles.css", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:19:44 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - GET "/css/login-home.css", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - GET "/login", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:19:44 - Selected '*/*' given [*/*]
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:44 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:19:44 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:44 - Completed 200 OK
2025-10-13 11:19:45 - GET "/home", parameters={}
2025-10-13 11:19:45 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:19:45 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:19:45 - [THYMELEAF][http-nio-8080-exec-2][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:19:45 - Completed 200 OK
2025-10-13 11:19:45 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:19:45 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:45 - Resource not found
2025-10-13 11:19:46 - GET "/css/styles.css", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:19:46 - Completed 404 NOT_FOUND
2025-10-13 11:19:46 - GET "/css/login-home.css", parameters={}
2025-10-13 11:19:46 - GET "/css/header.css", parameters={}
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:19:46 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:19:46 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:19:46 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:19:46 - Writing [{timestamp=Mon Oct 13 11:19:46 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:19:46 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:19:46 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:46 - Completed 200 OK
2025-10-13 11:19:46 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:19:48 - GET "/manage-gateways", parameters={}
2025-10-13 11:19:48 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#manageGateways(Model, Principal)
2025-10-13 11:19:48 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:19:48 - [THYMELEAF][http-nio-8080-exec-4][manageGateways] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})" found in template manageGateways, line 14, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Gateways', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:19:48 - GET "/css/header.css", parameters={}
2025-10-13 11:19:48 - GET "/css/manageGateways.css", parameters={}
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - GET "/css/styles.css", parameters={}
2025-10-13 11:19:48 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:19:48 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - Resource not found
2025-10-13 11:19:48 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:19:48 - Completed 404 NOT_FOUND
2025-10-13 11:19:48 - Completed 200 OK
2025-10-13 11:19:48 - Completed 200 OK
2025-10-13 11:19:48 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:19:48 - Completed 200 OK
2025-10-13 11:19:48 - Completed 200 OK
2025-10-13 11:19:48 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:19:48 - GET "/image/calendar-icon.svg", parameters={}
2025-10-13 11:19:48 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:48 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:48 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:19:48 - Writing [{timestamp=Mon Oct 13 11:19:48 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:19:48 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:19:48 - Completed 200 OK
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - GET "/image/search-icon.svg", parameters={}
2025-10-13 11:19:49 - GET "/javascript/manageGateways.js", parameters={}
2025-10-13 11:19:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - GET "/image/edit-icon.svg", parameters={}
2025-10-13 11:19:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:49 - GET "/image/monitoring-data.svg", parameters={}
2025-10-13 11:19:49 - GET "/image/delete-icon.svg", parameters={}
2025-10-13 11:19:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:49 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:49 - Completed 200 OK
2025-10-13 11:19:50 - GET "/manage-gateways/monitoring/rpi-mantu/view?ip=10.243.129.10", parameters={masked}
2025-10-13 11:19:50 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#monitoringView(String, String, Model, Principal)
2025-10-13 11:19:50 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - GET "/image/toggle_on.svg", parameters={}
2025-10-13 11:19:50 - GET "/image/thermostat.svg", parameters={}
2025-10-13 11:19:50 - Resource not found
2025-10-13 11:19:50 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:19:50 - GET "/css/monitoringGateway.css", parameters={}
2025-10-13 11:19:50 - Completed 404 NOT_FOUND
2025-10-13 11:19:50 - GET "/css/styles.css", parameters={}
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - GET "/css/header.css", parameters={}
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:19:50 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:19:50 - GET "/javascript/monitoringGateway.js", parameters={}
2025-10-13 11:19:50 - Writing [{timestamp=Mon Oct 13 11:19:50 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:50 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:50 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:19:50 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:19:50 - Completed 200 OK
2025-10-13 11:19:51 - Completed 200 OK
2025-10-13 11:19:51 - GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760347191069", parameters={masked}
2025-10-13 11:19:51 - Mapped to com.amaris.sensorprocessor.controller.GatewayController#streamMonitoringData(String, String, HttpSession)
2025-10-13 11:19:51 - [6ab07dba] HTTP GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu?ip=10.243.129.10&threadId=rpi-mantu-1B11A5C4A67E70AC07BE1CA43DE3CFC1-1760347191162
2025-10-13 11:19:51 - Started async request for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:19:51 - Exiting but response remains open for further handling
2025-10-13 11:19:51 - Erreur lors de la récupération des données de monitoring
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:51 - Async result set for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:19:51 - Performing async dispatch for "/manage-gateways/monitoring/rpi-mantu/stream"
2025-10-13 11:19:51 - "ASYNC" dispatch for GET "/manage-gateways/monitoring/rpi-mantu/stream?ip=10.243.129.10&t=1760347191069", parameters={masked}
2025-10-13 11:19:51 - Resume with async result [org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monit (truncated)...]
2025-10-13 11:19:51 - Unresolved failure from "ASYNC" dispatch: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
2025-10-13 11:19:51 - Servlet.service() for servlet [dispatcherServlet] threw exception
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:51 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries ] with root cause
io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:51 - "ERROR" dispatch for GET "/error?ip=10.243.129.10&t=1760347191069", parameters={masked}
2025-10-13 11:19:51 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:51 - No match for [text/event-stream], supported: [application/json, application/*+json, application/cbor]
2025-10-13 11:19:51 - Using @ExceptionHandler org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#mediaTypeNotAcceptable(HttpServletRequest)
2025-10-13 11:19:51 - Using 'text/event-stream', given [text/event-stream] and supported [text/plain, */*, application/json, application/*+json, application/cbor]
2025-10-13 11:19:51 - Nothing to write: null body
2025-10-13 11:19:51 - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-10-13 11:19:51 - Exiting from "ERROR" dispatch, status 500
2025-10-13 11:19:51 - Servlet container error notification for "/error"
2025-10-13 11:19:51 - [32c31f40] HTTP GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu?threadId=rpi-mantu-1B11A5C4A67E70AC07BE1CA43DE3CFC1-1760347191162
2025-10-13 11:19:52 - Erreur lors de l'arrêt du monitoring pour gateway rpi-mantu-1B11A5C4A67E70AC07BE1CA43DE3CFC1-1760347191162
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:52 - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
Caused by: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to GET http://monitoring:8081/api/monitoring/gateway/stop/rpi-mantu [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:137)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1742)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:325)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:174)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:479)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:443)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:593)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriber.onError(SecurityReactorContextConfiguration.java:191)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:600)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:376)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:123)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:642)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:131)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1158)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
		at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
		at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
		at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
		at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.UnknownHostException: Failed to resolve 'monitoring' [A(1)] after 2 queries 
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1150)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1097)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:455)
	at io.netty.resolver.dns.DnsResolveContext.onResponse(DnsResolveContext.java:686)
	at io.netty.resolver.dns.DnsResolveContext.access$500(DnsResolveContext.java:70)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:513)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:603)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:596)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:572)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:505)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:649)
	at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:638)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:308)
	at io.netty.resolver.dns.DnsQueryContext.finishSuccess(DnsQueryContext.java:299)
	at io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1491)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:107)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:97)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.netty.resolver.dns.DnsErrorCauseException: Query failed with NXDOMAIN
	at io.netty.resolver.dns.DnsResolveContext.onResponse(..)(Unknown Source)
2025-10-13 11:19:57 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:19:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:57 - Resource not found
2025-10-13 11:19:57 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:19:57 - Completed 404 NOT_FOUND
2025-10-13 11:19:57 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:19:57 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:57 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:19:57 - Writing [{timestamp=Mon Oct 13 11:19:57 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:19:57 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:19:57 - GET "/css/manageGateways.css", parameters={}
2025-10-13 11:19:57 - GET "/css/header.css", parameters={}
2025-10-13 11:19:57 - GET "/css/styles.css", parameters={}
2025-10-13 11:19:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:57 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:19:57 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:19:57 - Completed 200 OK
2025-10-13 11:19:57 - Resource not found
2025-10-13 11:19:57 - Completed 200 OK
2025-10-13 11:19:57 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:19:57 - Completed 404 NOT_FOUND
2025-10-13 11:19:57 - Completed 200 OK
2025-10-13 11:19:57 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:19:57 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:19:57 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:19:57 - Writing [{timestamp=Mon Oct 13 11:19:57 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:19:57 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:20:00 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:20:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:20:00 - Resource not found
2025-10-13 11:20:00 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:20:00 - Completed 404 NOT_FOUND
2025-10-13 11:20:00 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:20:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:20:00 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:20:00 - Writing [{timestamp=Mon Oct 13 11:20:00 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:20:00 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:20:00 - GET "/css/login-home.css", parameters={}
2025-10-13 11:20:00 - GET "/css/styles.css", parameters={}
2025-10-13 11:20:00 - GET "/css/header.css", parameters={}
2025-10-13 11:20:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:20:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:20:00 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:20:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:20:00 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:20:00 - Resource not found
2025-10-13 11:20:00 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:20:00 - Completed 404 NOT_FOUND
2025-10-13 11:20:00 - Completed 200 OK
2025-10-13 11:20:00 - Completed 200 OK
2025-10-13 11:20:00 - Completed 200 OK
2025-10-13 11:20:00 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:20:00 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:20:00 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:20:00 - Writing [{timestamp=Mon Oct 13 11:20:00 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:20:00 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:22:43 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:22:44 - Graceful shutdown complete
2025-10-13 11:22:46 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:22:46 - HikariPool-1 - Shutdown completed.
2025-10-13 11:22:50 - Starting SensorprocessorApplication using Java 17.0.12 with PID 12932 (C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App\target\classes started by seraphin.verbeke_ama in C:\Users\seraphin.verbeke_ama\Desktop\IoT_Management_App)
2025-10-13 11:22:50 - No active profile set, falling back to 1 default profile: "default"
2025-10-13 11:22:53 - Tomcat initialized with port 8080 (http)
2025-10-13 11:22:53 - Starting service [Tomcat]
2025-10-13 11:22:53 - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-13 11:22:53 - Initializing Spring embedded WebApplicationContext
2025-10-13 11:22:53 - Root WebApplicationContext: initialization completed in 3404 ms
2025-10-13 11:22:54 - Filter 'webMvcObservationFilter' configured for use
2025-10-13 11:22:54 - Filter 'hiddenHttpMethodFilter' configured for use
2025-10-13 11:22:54 - HikariPool-1 - Starting...
2025-10-13 11:22:54 - HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@718989fa
2025-10-13 11:22:54 - HikariPool-1 - Start completed.
2025-10-13 11:22:55 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-10-13 11:22:56 - 35 mappings in 'requestMappingHandlerMapping'
2025-10-13 11:22:56 - Patterns [/webjars/**, /**, /uploads/**] in 'resourceHandlerMapping'
2025-10-13 11:22:56 - Exposing 1 endpoint beneath base path '/actuator'
2025-10-13 11:22:56 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-10-13 11:22:57 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2025-10-13 11:22:59 - Tomcat started on port 8080 (http) with context path '/'
2025-10-13 11:22:59 - Started SensorprocessorApplication in 9.882 seconds (process running for 10.549)
2025-10-13 11:23:00 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-13 11:23:00 - Initializing Servlet 'dispatcherServlet'
2025-10-13 11:23:00 - Detected StandardServletMultipartResolver
2025-10-13 11:23:00 - Detected AcceptHeaderLocaleResolver
2025-10-13 11:23:00 - Detected FixedThemeResolver
2025-10-13 11:23:00 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@1532a327
2025-10-13 11:23:00 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@8646df4
2025-10-13 11:23:00 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-10-13 11:23:00 - Completed initialization in 75 ms
2025-10-13 11:23:00 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [170] milliseconds.
2025-10-13 11:23:00 - GET "/login", parameters={}
2025-10-13 11:23:00 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:23:00 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:23:01 - Completed 200 OK
2025-10-13 11:23:01 - GET "/css/login-home.css", parameters={}
2025-10-13 11:23:01 - GET "/css/styles.css", parameters={}
2025-10-13 11:23:01 - GET "/image/oeil.svg", parameters={}
2025-10-13 11:23:01 - GET "/image/cacher.svg", parameters={}
2025-10-13 11:23:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:01 - GET "/image/mantu-logo.jpg", parameters={}
2025-10-13 11:23:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:01 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:01 - Completed 200 OK
2025-10-13 11:23:01 - Completed 200 OK
2025-10-13 11:23:01 - Completed 200 OK
2025-10-13 11:23:01 - Completed 200 OK
2025-10-13 11:23:02 - Completed 200 OK
2025-10-13 11:23:02 - GET "/login", parameters={}
2025-10-13 11:23:02 - Mapped to com.amaris.sensorprocessor.controller.HomeController#loginPage()
2025-10-13 11:23:02 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:23:02 - Selected '*/*' given [*/*]
2025-10-13 11:23:02 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:02 - Completed 200 OK
2025-10-13 11:23:02 - Completed 200 OK
2025-10-13 11:23:27 - GET "/home", parameters={}
2025-10-13 11:23:27 - Mapped to com.amaris.sensorprocessor.controller.HomeController#home(Model, Principal)
2025-10-13 11:23:27 - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-10-13 11:23:27 - [THYMELEAF][http-nio-8080-exec-6][home] Deprecated unwrapped fragment expression "fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})" found in template home, line 11, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/header :: appHeader(pageTitle='Manage Users', homeUrl=@{/})}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-10-13 11:23:27 - Completed 200 OK
2025-10-13 11:23:28 - GET "/.well-known/appspecific/com.chrome.devtools.json", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - GET "/image/gateway-icon.svg", parameters={}
2025-10-13 11:23:28 - GET "/css/login-home.css", parameters={}
2025-10-13 11:23:28 - GET "/css/header.css", parameters={}
2025-10-13 11:23:28 - Resource not found
2025-10-13 11:23:28 - GET "/css/styles.css", parameters={}
2025-10-13 11:23:28 - GET "/image/sensor-icon.svg", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource .well-known/appspecific/com.chrome.devtools.json.]
2025-10-13 11:23:28 - Completed 404 NOT_FOUND
2025-10-13 11:23:28 - GET "/uploads/20251013_110308_chevre.png", parameters={}
2025-10-13 11:23:28 - GET "/image/predictive.svg", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [URL [file:uploads/]]
2025-10-13 11:23:28 - GET "/image/alerte.svg", parameters={}
2025-10-13 11:23:28 - GET "/image/user-icon.svg", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - GET "/image/config-icon.svg", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - GET "/image/mantu-background.jpg", parameters={}
2025-10-13 11:23:28 - Mapped to ResourceHttpRequestHandler [classpath [static/], URL [file:uploads/], ServletContext [/]]
2025-10-13 11:23:28 - "ERROR" dispatch for GET "/error", parameters={}
2025-10-13 11:23:28 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Completed 200 OK
2025-10-13 11:23:28 - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/cbor]
2025-10-13 11:23:28 - Writing [{timestamp=Mon Oct 13 11:23:28 CEST 2025, status=404, error=Not Found, path=/.well-known/appspecific (truncated)...]
2025-10-13 11:23:28 - Exiting from "ERROR" dispatch, status 404
2025-10-13 11:25:16 - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-13 11:25:16 - Graceful shutdown complete
2025-10-13 11:25:19 - HikariPool-1 - Shutdown initiated...
2025-10-13 11:25:19 - HikariPool-1 - Shutdown completed.
