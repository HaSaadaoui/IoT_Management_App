name: Deploy to Raspberry Pi with Docker

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Give execute permission to mvnw
        run: chmod +x ./mvnw

      - name: Build project
        run: ./mvnw clean package -DskipTests

      - name: Build Docker image
        run: docker build -t sensorprocessor:latest .

      - name: Install OpenVPN 2.5.7
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install build-essential
          sudo apt-get install liblzo2-dev
          sudo apt-get install libpam0g-dev
          curl -L -o openvpn-2.5.7.tar.gz https://swupdate.openvpn.org/community/releases/openvpn-2.5.7.tar.gz
          tar -xvzf openvpn-2.5.7.tar.gz
          cd openvpn-2.5.7
          ./configure
          make
          sudo make install
          cd ..
          mkdir -p ./tmp
          echo "${{ secrets.OVPN_CONFIG }}" | base64 --decode | sudo tee ./tmp/config > /dev/null
          sudo chmod 777 ./tmp/config

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: ./tmp/config
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}

#      - name: Install pv
#        run: sudo apt-get install pv

      - name: Install Docker on Raspberry Pi
        run: |
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} "
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &&
            curl -fsSL https://get.docker.com -o get-docker.sh &&
            sudo sh get-docker.sh

      - name: Copy Docker image to Raspberry Pi
        run: |
          docker save sensorprocessor:latest | bzip2 | pv | sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S docker load < /dev/stdin'

      - name: Stop and remove existing Docker container
        run: |
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'docker stop sensorprocessor || true && docker rm sensorprocessor || true'

      - name: Run Docker container on Raspberry Pi
        run: |
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'docker run -d -e DB_PATH=/opt/app/mydatabase.db -v /opt/app/mydatabase.db:/opt/app/db -p 8080:8080 --name sensorprocessor sensorprocessor:latest'
