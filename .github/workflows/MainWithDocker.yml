name: Deploy to Raspberry Pi with Docker

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Give execute permission to mvnw
        run: chmod +x ./mvnw

      - name: Build project
        run: ./mvnw clean package -DskipTests

      - name: Change and verify permissions
        run: |
          chmod 777 target/
          chmod 777 target/sensorprocessor-0.0.1-SNAPSHOT.jar
          ls -l target/sensorprocessor-0.0.1-SNAPSHOT.jar
          ls -ld target

      - name: Build Docker image
        #run: docker build -t sensorprocessor .
        #run: docker build --platform linux/arm64 -t sensorprocessor .
        run: docker build --platform linux/arm64 --no-cache -t sensorprocessor .

      - name: Install OpenVPN 2.5.7
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install build-essential
          sudo apt-get install liblzo2-dev
          sudo apt-get install libpam0g-dev
          curl -L -o openvpn-2.5.7.tar.gz https://swupdate.openvpn.org/community/releases/openvpn-2.5.7.tar.gz
          tar -xvzf openvpn-2.5.7.tar.gz
          cd openvpn-2.5.7
          ./configure
          make
          sudo make install
          cd ..
          mkdir -p ./tmp
          echo "${{ secrets.OVPN_CONFIG }}" | base64 --decode | sudo tee ./tmp/config > /dev/null
          sudo chmod 777 ./tmp/config

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: ./tmp/config
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}

      - name: Install Docker on Raspberry Pi
        run: |
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} '
            if ! command -v docker &> /dev/null; then
              echo "Docker non trouvé, installation..."
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get clean && \
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get update --fix-missing && \
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get install -y apt-transport-https ca-certificates curl software-properties-common && \
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc && \
              sudo add-apt-repository "deb [arch=armhf] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" && \
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get update && \
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get install -y docker-ce && \
              echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S chmod -R 777 /var/lib/docker
            else
              echo "Docker est déjà installé."
            fi'

          #sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} \
          #'echo "Cleaning apt" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get clean && \
          #echo "Updating apt packages" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get update --fix-missing && \
          #echo "Installing dependencies" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get install -y apt-transport-https ca-certificates curl software-properties-common && \
          #echo "Adding Docker GPG key" && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc && \
          #echo "Adding Docker repository" && sudo add-apt-repository "deb [arch=armhf] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" && \
          #echo "Updating apt again" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get update && \
          #echo "Installing Docker" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S apt-get install -y docker-ce && \
          #echo "Changing Docker permissions" && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S chmod -R 777 /var/lib/docker'

      - name: Stop and remove existing Docker container and image
        run: |
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S docker stop sensorprocessor || true && echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S docker rm sensorprocessor || true'
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S docker rmi sensorprocessor || true'

      - name: Copy Docker image to Raspberry Pi
        run: |
          echo "Starting Docker save"
          docker save sensorprocessor -o image.tar
          echo "Docker save completed"
          echo "Compressing image"
          gzip image.tar
          echo "Compression completed"
          echo "Starting SCP transfer"
          sshpass -p "${{ secrets.RASPBERRY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'if [ -e /tmp/image.tar.gz ]; then echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S rm -f /tmp/image.tar.gz; fi'
          sshpass -p "${{ secrets.RASPBERRY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'if [ -e /tmp/image.tar ]; then echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S rm -f /tmp/image.tar; fi'
          sshpass -p "${{ secrets.RASPBERRY_PASSWORD }}" scp -o StrictHostKeyChecking=no image.tar.gz ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:/tmp
          echo "SCP transfer completed"
          echo "Starting SSH to Raspberry Pi"
          sshpass -p "${{ secrets.RASPBERRY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S bash -c "gunzip -f /tmp/image.tar.gz && docker load -i /tmp/image.tar"'
          echo "SSH and Docker load completed"

      - name: Run Docker container on Raspberry Pi
        run: |
          #sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'sudo -S docker run -d -e DB_PATH=/opt/app/mydatabase.db -v /opt/app/mydatabase.db:/opt/app/db -p 9090:8080 --name sensorprocessor sensorprocessor'
          sshpass -p ${{ secrets.RASPBERRY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} 'echo ${{ secrets.RASPBERRY_PASSWORD }} | sudo -S docker run -d -e DB_PATH=/opt/app -v /opt/app:/opt/app -p 9090:8080 --name sensorprocessor sensorprocessor'
