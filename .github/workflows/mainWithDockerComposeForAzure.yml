name: Deploy to Azure Cloud with Docker Compose

on:
  push:
    branches:
      - main # STAGING (PRE-PROD)
      - develop # TEST
      - pipeline-test # Remove later
  workflow_dispatch:

env:
  BRANCH: ${{ github.head_ref || github.ref_name }} 
  GATEWAY_MONITORING_GIT_URL: https://github.com/HaSaadaoui/Gateway_Monitoring_Api.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER_STAGING }}" >> $GITHUB_ENV
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASS_STAGING }}" >> $GITHUB_ENV
            echo "SPRING_DATASOURCE_URL=${{ secrets.MYSQL_DB_URL_STAGING }}" >> $GITHUB_ENV
            echo "HOST=${{ secrets.AZURE_HOST }}" >> $GITHUB_ENV
            echo "USER=azureuser" >> $GITHUB_ENV
            echo "PORT=80" >> $GITHUB_ENV
          else
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER_TEST }}" >> $GITHUB_ENV
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASS_TEST }}" >> $GITHUB_ENV
            echo "SPRING_DATASOURCE_URL=${{ secrets.MYSQL_DB_URL_TEST }}" >> $GITHUB_ENV
            echo "HOST=${{ secrets.AZURE_HOST_TEST }}" >> $GITHUB_ENV
            echo "USER=mantu" >> $GITHUB_ENV
            echo "PORT=8080" >> $GITHUB_ENV
          fi
          echo "BRANCH=${{ env.BRANCH }}" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=localhost:5000" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver" >> $GITHUB_ENV
          echo "ACS_CONNECTION_STRING=${{ secrets.ACS_CONNECTION_STRING }}" >> $GITHUB_ENV
          
      - name: ssh-agent setup
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_PRIVATE_KEY }}
      
      - name: Give execute permission to mvnw
        run: chmod +x ./mvnw

      - name: Build project
        run: ./mvnw clean package -DskipTests


      - name: Build and tag Docker image
        run: |
          docker build --platform linux/amd64 -t localhost:5000/sensorprocessor:${{ env.BRANCH }} .

      - name: Copy Docker image to Azure Cloud
        run: |
          echo "Starting Docker save"
          docker save localhost:5000/sensorprocessor:${{ env.BRANCH }} -o sensorprocessor.tar
          echo "Docker save completed"
          echo "Compressing image"
          gzip sensorprocessor.tar
          echo "Compression completed"
          echo "Starting SCP transfer"
          scp -o StrictHostKeyChecking=no sensorprocessor.tar.gz ${{ env.USER }}@${{ env.HOST }}:/home/${{ env.USER }}/sensorprocessor.tar.gz
          echo "SCP transfer completed"
          echo "Starting SSH to Azure Cloud"
          ssh -o StrictHostKeyChecking=no ${{ env.USER }}@${{ env.HOST }} '
            sudo bash -c "gunzip -f /home/${{ env.USER }}/sensorprocessor.tar.gz && docker load -i /home/${{ env.USER }}/sensorprocessor.tar"
          '
          echo "SSH and Docker load completed"

      - name: Build and copy Docker image to Azure Cloud
        run: |
          echo "Cloning repository"
          git clone ${{ env.GATEWAY_MONITORING_GIT_URL }} tmp_gateway_monitoring_api
          
          if [[ "${{ env.BRANCH }}" != "main" ]]; then
            git checkout develop
          fi

          echo "Build the gateway docker image"
          cd tmp_gateway_monitoring_api/
          docker build --platform linux/amd64 -t localhost:5000/gateway:${{ env.BRANCH }} .
          echo "Saving gateway docker image"
          docker save gateway -o gateway.tar
          echo "Compressing gateway image"
          gzip gateway.tar
          echo "Starting SCP transfer for gateway"
          scp -o StrictHostKeyChecking=no gateway.tar.gz ${{ env.USER }}@${{ env.HOST }}:/home/${{ env.USER }}/gateway.tar.gz
          echo "SCP transfer for gateway completed"
          echo "Starting SSH to Azure Cloud for gateway"
          ssh -o StrictHostKeyChecking=no ${{ env.USER }}@${{ env.HOST }} '
            sudo bash -c "gunzip -f /home/${{ env.USER }}/gateway.tar.gz && docker load -i /home/${{ env.USER }}/gateway.tar"
          '
          echo "SSH and Docker load for gateway completed"

      - name: Run Docker Compose on Azure Cloud
        run: |
          echo '
            SPRING_DATASOURCE_USERNAME=${{ env.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ env.SPRING_DATASOURCE_PASSWORD }}
            SPRING_DATASOURCE_URL=${{ env.SPRING_DATASOURCE_URL }}
            HOST=${{ env.HOST }}
            USER=${{ env.USER }}
            BRANCH=${{ env.BRANCH }}
            DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ env.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}
            ACS_CONNECTION_STRING="${{ env.ACS_CONNECTION_STRING }}"
            ACS_FROM_EMAIL="DoNotReply@7bcc2766-fee2-4b02-8ccf-0675ed430b8c.azurecomm.net"
            PORT=${{ env.PORT }}
          ' > .env
          scp -o StrictHostKeyChecking=no .env ${{ env.USER }}@${{ env.HOST }}:/home/${{ env.USER }}/.env
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ env.USER }}@${{ env.HOST }}:/home/${{ env.USER }}/docker-compose.yml
          ssh -o StrictHostKeyChecking=no ${{ env.USER }}@${{ env.HOST }} '
            cd /opt/app/ &&
            sudo mv -f /home/${{ env.USER }}/.env ./ &&
            sudo mv -f /home/${{ env.USER }}/docker-compose.yml ./ &&
            sudo docker compose -f docker-compose.yml up -d --remove-orphans
          '


          